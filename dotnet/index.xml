<Overview>
  <Assemblies>
    <Assembly Name="Microsoft.Toolkit.Uwp.Connectivity" Version="2.2.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("This library enables easier consumption of Devices / Peripherals connected to Windows device. It is part of the UWP Community Toolkit.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.2.0.165")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.2.0+gd22f16484f")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Uwp.Connectivity")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Uwp.Connectivity")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCore,Version=v5.0", FrameworkDisplayName=".NET for Windows Universal")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Uwp.DeveloperTools" Version="2.2.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("This library provides XAML user controls and services to help developer building their app. It is part of the UWP Community Toolkit.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.2.0.165")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.2.0+gd22f16484f")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Uwp.DeveloperTools")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Uwp.DeveloperTools")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCore,Version=v5.0", FrameworkDisplayName=".NET for Windows Universal")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Uwp" Version="2.2.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("This package includes code only helpers such as Colors conversion tool, Storage file handling, a Stream helper class, etc.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.2.0.165")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.2.0+gd22f16484f")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Uwp")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Uwp")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCore,Version=v5.0", FrameworkDisplayName=".NET for Windows Universal")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Uwp.Notifications" Version="2.2.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Generate tile, toast, and badge notifications for Windows 10 via code, with the help of IntelliSense, instead of directly using XML.\r\nSupports adaptive tiles and adaptive/interactive toasts for Windows 10. It is part of the UWP Community Toolkit. Supports C# and C++ UWP project types (see Microsoft.Toolkit.Uwp.Notifications.JavaScript for the JS version). Also works with C# portable class libraries and non-UWP C# projects like server projects.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.2.0.165")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.2.0+gd22f16484f")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Uwp.Notifications")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Uwp.Notifications")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCore,Version=v5.0", FrameworkDisplayName=".NET for Windows Universal")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Uwp.UI.Animations" Version="2.2.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("This library provides helpers and services on top of Windows Composition and XAML storyboards. It is part of the UWP Community Toolkit.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.2.0.165")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.2.0+gd22f16484f")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Uwp.UI.Animations")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Uwp.UI.Animations")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCore,Version=v5.0", FrameworkDisplayName=".NET for Windows Universal")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Uwp.UI.Controls" Version="2.2.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("This library provides XAML user controls. It is part of the UWP Community Toolkit.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.2.0.165")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.2.0+gd22f16484f")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Uwp.UI.Controls")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Uwp.UI.Controls")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("UnitTests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCore,Version=v5.0", FrameworkDisplayName=".NET for Windows Universal")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Toolkit.Uwp.UI" Version="2.2.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("This library provides UI services. It is part of the UWP Community Toolkit.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.2.0.165")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("2.2.0+gd22f16484f")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Toolkit.Uwp.UI")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Toolkit.Uwp.UI")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETCore,Version=v5.0", FrameworkDisplayName=".NET for Windows Universal")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
  </Assemblies>
  <Remarks>To be added.</Remarks>
  <Copyright>To be added.</Copyright>
  <Types>
    <Namespace Name="Microsoft.Toolkit.Uwp">
      <Type Name="HslColor" Kind="Structure" />
      <Type Name="HsvColor" Kind="Structure" />
      <Type Name="HttpHelper" Kind="Class" />
      <Type Name="HttpHelperRequest" Kind="Class" />
      <Type Name="HttpHelperResponse" Kind="Class" />
      <Type Name="IIncrementalSource`1" DisplayName="IIncrementalSource&lt;TSource&gt;" Kind="Interface" />
      <Type Name="IncrementalLoadingCollection`2" DisplayName="IncrementalLoadingCollection&lt;TSource,IType&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.Connectivity">
      <Type Name="BluetoothLEHelper" Kind="Class" />
      <Type Name="ConnectionInformation" Kind="Class" />
      <Type Name="ConnectionType" Kind="Enumeration" />
      <Type Name="GattConvert" Kind="Class" />
      <Type Name="GattNativeUuid" Kind="Enumeration" />
      <Type Name="GattProtocolErrorParser" Kind="Class" />
      <Type Name="GattUuidsService" Kind="Class" />
      <Type Name="NetworkHelper" Kind="Class" />
      <Type Name="ObservableBluetoothLEDevice" Kind="Class" />
      <Type Name="ObservableBluetoothLEDevice+RSSIComparer" Kind="Class" />
      <Type Name="ObservableGattCharacteristics" Kind="Class" />
      <Type Name="ObservableGattCharacteristics+DisplayTypes" Kind="Enumeration" />
      <Type Name="ObservableGattDeviceService" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.DeveloperTools">
      <Type Name="AlignmentGrid" Kind="Class" />
      <Type Name="FocusTracker" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.DeveloperTools.Microsoft_Toolkit_Uwp_DeveloperTools_XamlTypeInfo">
      <Type Name="XamlMetaDataProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.Helpers">
      <Type Name="AppPinManager" Kind="Class" />
      <Type Name="BackgroundTaskHelper" Kind="Class" />
      <Type Name="BaseObjectStorageHelper" Kind="Class" />
      <Type Name="CollectionFormingDeepLinkParser" Kind="Class" />
      <Type Name="ColorHelper" Kind="Class" />
      <Type Name="DeepLinkParser" Kind="Class" />
      <Type Name="DispatcherHelper" Kind="Class" />
      <Type Name="IObjectStorageHelper" Kind="Interface" />
      <Type Name="LocalObjectStorageHelper" Kind="Class" />
      <Type Name="OSVersion" Kind="Structure" />
      <Type Name="PackageVersionHelper" Kind="Class" />
      <Type Name="PinResult" Kind="Enumeration" />
      <Type Name="PrintHelper" Kind="Class" />
      <Type Name="QueryParameterCollection" Kind="Class" />
      <Type Name="RoamingObjectStorageHelper" Kind="Class" />
      <Type Name="ScreenUnit" Kind="Enumeration" />
      <Type Name="ScreenUnitHelper" Kind="Class" />
      <Type Name="StorageFileHelper" Kind="Class" />
      <Type Name="StreamHelper" Kind="Class" />
      <Type Name="SystemInformation" Kind="Class" />
      <Type Name="WeakEventListener`3" DisplayName="WeakEventListener&lt;TInstance,TSource,TEventArgs&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.Notifications">
      <Type Name="AdaptiveGroup" Kind="Class" />
      <Type Name="AdaptiveImage" Kind="Class" />
      <Type Name="AdaptiveImageAlign" Kind="Enumeration" />
      <Type Name="AdaptiveImageCrop" Kind="Enumeration" />
      <Type Name="AdaptiveProgressBar" Kind="Class" />
      <Type Name="AdaptiveProgressBarValue" Kind="Class" />
      <Type Name="AdaptiveSubgroup" Kind="Class" />
      <Type Name="AdaptiveSubgroupTextStacking" Kind="Enumeration" />
      <Type Name="AdaptiveText" Kind="Class" />
      <Type Name="AdaptiveTextAlign" Kind="Enumeration" />
      <Type Name="AdaptiveTextStyle" Kind="Enumeration" />
      <Type Name="BadgeGlyphContent" Kind="Class" />
      <Type Name="BadgeGlyphValue" Kind="Enumeration" />
      <Type Name="BadgeNumericContent" Kind="Class" />
      <Type Name="BindableProgressBarValue" Kind="Class" />
      <Type Name="BindableString" Kind="Class" />
      <Type Name="IAdaptiveChild" Kind="Interface" />
      <Type Name="IAdaptiveSubgroupChild" Kind="Interface" />
      <Type Name="IBaseImage" Kind="Interface" />
      <Type Name="IBaseText" Kind="Interface" />
      <Type Name="INotificationContent" Kind="Interface" />
      <Type Name="ITileBindingContent" Kind="Interface" />
      <Type Name="ITileBindingContentAdaptiveChild" Kind="Interface" />
      <Type Name="IToastActions" Kind="Interface" />
      <Type Name="IToastBindingGenericChild" Kind="Interface" />
      <Type Name="IToastButton" Kind="Interface" />
      <Type Name="IToastInput" Kind="Interface" />
      <Type Name="TileBackgroundImage" Kind="Class" />
      <Type Name="TileBackgroundImageCrop" Kind="Enumeration" />
      <Type Name="TileBasicImage" Kind="Class" />
      <Type Name="TileBasicText" Kind="Class" />
      <Type Name="TileBinding" Kind="Class" />
      <Type Name="TileBindingContentAdaptive" Kind="Class" />
      <Type Name="TileBindingContentContact" Kind="Class" />
      <Type Name="TileBindingContentIconic" Kind="Class" />
      <Type Name="TileBindingContentPeople" Kind="Class" />
      <Type Name="TileBindingContentPhotos" Kind="Class" />
      <Type Name="TileBranding" Kind="Enumeration" />
      <Type Name="TileContent" Kind="Class" />
      <Type Name="TilePeekImage" Kind="Class" />
      <Type Name="TilePeekImageCrop" Kind="Enumeration" />
      <Type Name="TileTextStacking" Kind="Enumeration" />
      <Type Name="TileVisual" Kind="Class" />
      <Type Name="ToastActionsCustom" Kind="Class" />
      <Type Name="ToastActionsSnoozeAndDismiss" Kind="Class" />
      <Type Name="ToastActivationOptions" Kind="Class" />
      <Type Name="ToastActivationType" Kind="Enumeration" />
      <Type Name="ToastAfterActivationBehavior" Kind="Enumeration" />
      <Type Name="ToastAudio" Kind="Class" />
      <Type Name="ToastBindingGeneric" Kind="Class" />
      <Type Name="ToastBindingShoulderTap" Kind="Class" />
      <Type Name="ToastButton" Kind="Class" />
      <Type Name="ToastButtonDismiss" Kind="Class" />
      <Type Name="ToastButtonSnooze" Kind="Class" />
      <Type Name="ToastContent" Kind="Class" />
      <Type Name="ToastContextMenuItem" Kind="Class" />
      <Type Name="ToastDuration" Kind="Enumeration" />
      <Type Name="ToastGenericAppLogo" Kind="Class" />
      <Type Name="ToastGenericAppLogoCrop" Kind="Enumeration" />
      <Type Name="ToastGenericAttributionText" Kind="Class" />
      <Type Name="ToastGenericHeroImage" Kind="Class" />
      <Type Name="ToastHeader" Kind="Class" />
      <Type Name="ToastImageCrop" Kind="Enumeration" />
      <Type Name="ToastPeople" Kind="Class" />
      <Type Name="ToastScenario" Kind="Enumeration" />
      <Type Name="ToastSelectionBox" Kind="Class" />
      <Type Name="ToastSelectionBoxItem" Kind="Class" />
      <Type Name="ToastShoulderTapImage" Kind="Class" />
      <Type Name="ToastSpriteSheet" Kind="Class" />
      <Type Name="ToastTextBox" Kind="Class" />
      <Type Name="ToastVisual" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI">
      <Type Name="AdvancedCollectionView" Kind="Class" />
      <Type Name="AdvancedCollectionView+NotificationDeferrer" Kind="Class" />
      <Type Name="CacheBase`1" DisplayName="CacheBase&lt;T&gt;" Kind="Class" />
      <Type Name="DesignTimeHelpers" Kind="Class" />
      <Type Name="FileCache" Kind="Class" />
      <Type Name="HyperlinkExtensions" Kind="Class" />
      <Type Name="IAdvancedCollectionView" Kind="Interface" />
      <Type Name="ImageCache" Kind="Class" />
      <Type Name="InMemoryStorage`1" DisplayName="InMemoryStorage&lt;T&gt;" Kind="Class" />
      <Type Name="InMemoryStorageItem`1" DisplayName="InMemoryStorageItem&lt;T&gt;" Kind="Class" />
      <Type Name="ListViewBaseExtensions" Kind="Class" />
      <Type Name="SortDescription" Kind="Class" />
      <Type Name="SortDirection" Kind="Enumeration" />
      <Type Name="WebViewExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Animations">
      <Type Name="AnimationBase" Kind="Class" />
      <Type Name="AnimationCollection" Kind="Class" />
      <Type Name="AnimationExtensions" Kind="Class" />
      <Type Name="AnimationSet" Kind="Class" />
      <Type Name="AnimationSetCompletedEventArgs" Kind="Class" />
      <Type Name="AnimationSetState" Kind="Enumeration" />
      <Type Name="Connected" Kind="Class" />
      <Type Name="EasingType" Kind="Enumeration" />
      <Type Name="ExpressionKeyFrame" Kind="Class" />
      <Type Name="Implicit" Kind="Class" />
      <Type Name="KeyFrame" Kind="Class" />
      <Type Name="KeyFrameCollection" Kind="Class" />
      <Type Name="LoadTimeEffectHandler" Kind="Delegate" />
      <Type Name="OffsetAnimation" Kind="Class" />
      <Type Name="OpacityAnimation" Kind="Class" />
      <Type Name="ParallaxService" Kind="Class" />
      <Type Name="ReorderGridAnimation" Kind="Class" />
      <Type Name="RotationAnimation" Kind="Class" />
      <Type Name="RotationInDegreesAnimation" Kind="Class" />
      <Type Name="ScalarAnimation" Kind="Class" />
      <Type Name="ScalarKeyFrame" Kind="Class" />
      <Type Name="ScaleAnimation" Kind="Class" />
      <Type Name="SurfaceLoader" Kind="Class" />
      <Type Name="TranslationAnimation" Kind="Class" />
      <Type Name="TypedAnimationBase`2" DisplayName="TypedAnimationBase&lt;TKeyFrame,U&gt;" Kind="Class" />
      <Type Name="TypedKeyFrame`1" DisplayName="TypedKeyFrame&lt;T&gt;" Kind="Class" />
      <Type Name="Vector2Animation" Kind="Class" />
      <Type Name="Vector2KeyFrame" Kind="Class" />
      <Type Name="Vector3Animation" Kind="Class" />
      <Type Name="Vector3KeyFrame" Kind="Class" />
      <Type Name="Vector4Animation" Kind="Class" />
      <Type Name="Vector4KeyFrame" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Animations.Behaviors">
      <Type Name="BehaviorBase`1" DisplayName="BehaviorBase&lt;T&gt;" Kind="Class" />
      <Type Name="Blur" Kind="Class" />
      <Type Name="CompositionBehaviorBase" Kind="Class" />
      <Type Name="CompositionBehaviorBase`1" DisplayName="CompositionBehaviorBase&lt;T&gt;" Kind="Class" />
      <Type Name="Fade" Kind="Class" />
      <Type Name="FadeHeaderBehavior" Kind="Class" />
      <Type Name="Light" Kind="Class" />
      <Type Name="Offset" Kind="Class" />
      <Type Name="QuickReturnHeaderBehavior" Kind="Class" />
      <Type Name="Rotate" Kind="Class" />
      <Type Name="Saturation" Kind="Class" />
      <Type Name="Scale" Kind="Class" />
      <Type Name="StickyHeaderBehavior" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Animations.Effects">
      <Type Name="AnimationEffect" Kind="Class" />
      <Type Name="Blur" Kind="Class" />
      <Type Name="Saturation" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Animations.Expressions">
      <Type Name="AmbientLightReferenceNode" Kind="Class" />
      <Type Name="BooleanNode" Kind="Class" />
      <Type Name="ColorBrushReferenceNode" Kind="Class" />
      <Type Name="ColorNode" Kind="Class" />
      <Type Name="CompositionExtensions" Kind="Class" />
      <Type Name="DistantLightReferenceNode" Kind="Class" />
      <Type Name="DropShadowReferenceNode" Kind="Class" />
      <Type Name="ExpressionFunctions" Kind="Class" />
      <Type Name="ExpressionNode" Kind="Class" />
      <Type Name="ExpressionValues" Kind="Class" />
      <Type Name="ExpressionValues+Constant" Kind="Class" />
      <Type Name="ExpressionValues+CurrentValue" Kind="Class" />
      <Type Name="ExpressionValues+Reference" Kind="Class" />
      <Type Name="ExpressionValues+StartingValue" Kind="Class" />
      <Type Name="ExpressionValues+Target" Kind="Class" />
      <Type Name="InsetClipReferenceNode" Kind="Class" />
      <Type Name="InteractionTrackerReferenceNode" Kind="Class" />
      <Type Name="ManipulationPropertySetReferenceNode" Kind="Class" />
      <Type Name="Matrix3x2Node" Kind="Class" />
      <Type Name="Matrix3x2Node+Subchannel" Kind="Enumeration" />
      <Type Name="Matrix4x4Node" Kind="Class" />
      <Type Name="Matrix4x4Node+Subchannel" Kind="Enumeration" />
      <Type Name="NineGridBrushReferenceNode" Kind="Class" />
      <Type Name="PointerPositionPropertySetReferenceNode" Kind="Class" />
      <Type Name="PointLightReferenceNode" Kind="Class" />
      <Type Name="PropertySetReferenceNode" Kind="Class" />
      <Type Name="QuaternionNode" Kind="Class" />
      <Type Name="ReferenceNode" Kind="Class" />
      <Type Name="ScalarNode" Kind="Class" />
      <Type Name="SpotLightReferenceNode" Kind="Class" />
      <Type Name="SurfaceBrushReferenceNode" Kind="Class" />
      <Type Name="Vector2Node" Kind="Class" />
      <Type Name="Vector2Node+Subchannel" Kind="Enumeration" />
      <Type Name="Vector3Node" Kind="Class" />
      <Type Name="Vector3Node+Subchannel" Kind="Enumeration" />
      <Type Name="Vector4Node" Kind="Class" />
      <Type Name="Vector4Node+Subchannel" Kind="Enumeration" />
      <Type Name="VisualReferenceNode" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Controls">
      <Type Name="AdaptiveGridView" Kind="Class" />
      <Type Name="BladeItem" Kind="Class" />
      <Type Name="BladeMode" Kind="Enumeration" />
      <Type Name="BladeView" Kind="Class" />
      <Type Name="Carousel" Kind="Class" />
      <Type Name="CarouselItem" Kind="Class" />
      <Type Name="CarouselPanel" Kind="Class" />
      <Type Name="CodeBlockResolvingEventArgs" Kind="Class" />
      <Type Name="Dock" Kind="Enumeration" />
      <Type Name="DockPanel" Kind="Class" />
      <Type Name="DropShadowPanel" Kind="Class" />
      <Type Name="EditorChangedArgs" Kind="Class" />
      <Type Name="ExpandDirection" Kind="Enumeration" />
      <Type Name="Expander" Kind="Class" />
      <Type Name="GridSplitter" Kind="Class" />
      <Type Name="GridSplitter+GridResizeBehavior" Kind="Enumeration" />
      <Type Name="GridSplitter+GridResizeDirection" Kind="Enumeration" />
      <Type Name="GridSplitter+GripperCursorType" Kind="Enumeration" />
      <Type Name="GridSplitter+SplitterCursorBehavior" Kind="Enumeration" />
      <Type Name="HamburgerMenu" Kind="Class" />
      <Type Name="HamburgerMenuGlyphItem" Kind="Class" />
      <Type Name="HamburgerMenuImageItem" Kind="Class" />
      <Type Name="HamburgerMenuItem" Kind="Class" />
      <Type Name="HamburgerMenuItemCollection" Kind="Class" />
      <Type Name="HamburgerMenuItemInvokedEventArgs" Kind="Class" />
      <Type Name="HamburgerMenuNavViewItemStyleSelector" Kind="Class" />
      <Type Name="HamburgetMenuItemInvokedEventArgs" Kind="Class" />
      <Type Name="HeaderedContentControl" Kind="Class" />
      <Type Name="HeaderedItemsControl" Kind="Class" />
      <Type Name="HeaderedTextBlock" Kind="Class" />
      <Type Name="ImageAlignment" Kind="Enumeration" />
      <Type Name="ImageEx" Kind="Class" />
      <Type Name="ImageExBase" Kind="Class" />
      <Type Name="ImageExFailedEventArgs" Kind="Class" />
      <Type Name="ImageExFailedEventHandler" Kind="Delegate" />
      <Type Name="ImageExOpenedEventArgs" Kind="Class" />
      <Type Name="ImageExOpenedEventHandler" Kind="Delegate" />
      <Type Name="ImageResolvingEventArgs" Kind="Class" />
      <Type Name="InAppNotification" Kind="Class" />
      <Type Name="InAppNotificationClosedEventArgs" Kind="Class" />
      <Type Name="InAppNotificationClosedEventHandler" Kind="Delegate" />
      <Type Name="InAppNotificationClosingEventArgs" Kind="Class" />
      <Type Name="InAppNotificationClosingEventHandler" Kind="Delegate" />
      <Type Name="InAppNotificationDismissKind" Kind="Enumeration" />
      <Type Name="InAppNotificationOpeningEventArgs" Kind="Class" />
      <Type Name="InAppNotificationOpeningEventHandler" Kind="Delegate" />
      <Type Name="InlineCollectionWrapper" Kind="Class" />
      <Type Name="LayoutTransformControl" Kind="Class" />
      <Type Name="LinkClickedEventArgs" Kind="Class" />
      <Type Name="Loading" Kind="Class" />
      <Type Name="MarkdownRenderedEventArgs" Kind="Class" />
      <Type Name="MarkdownTextBlock" Kind="Class" />
      <Type Name="MasterDetailsView" Kind="Class" />
      <Type Name="MasterDetailsViewState" Kind="Enumeration" />
      <Type Name="Menu" Kind="Class" />
      <Type Name="MenuItem" Kind="Class" />
      <Type Name="OrbitView" Kind="Class" />
      <Type Name="OrbitViewDataItem" Kind="Class" />
      <Type Name="OrbitViewDataItemCollection" Kind="Class" />
      <Type Name="OrbitViewElementProperties" Kind="Class" />
      <Type Name="OrbitViewItem" Kind="Class" />
      <Type Name="OrbitViewItemClickedEventArgs" Kind="Class" />
      <Type Name="OrbitViewPanel" Kind="Class" />
      <Type Name="OrbitViewPanelItemArrangedArgs" Kind="Class" />
      <Type Name="OrbitViewPanelItemsArrangedArgs" Kind="Class" />
      <Type Name="Proj" Kind="Structure" />
      <Type Name="PullToRefreshListView" Kind="Class" />
      <Type Name="RadialGauge" Kind="Class" />
      <Type Name="RadialProgressBar" Kind="Class" />
      <Type Name="RangeChangedEventArgs" Kind="Class" />
      <Type Name="RangeSelector" Kind="Class" />
      <Type Name="RangeSelectorProperty" Kind="Enumeration" />
      <Type Name="RefreshProgressEventArgs" Kind="Class" />
      <Type Name="RotatorTile" Kind="Class" />
      <Type Name="RotatorTile+RotateDirection" Kind="Enumeration" />
      <Type Name="RoundImageEx" Kind="Class" />
      <Type Name="ScrollHeader" Kind="Class" />
      <Type Name="ScrollHeaderMode" Kind="Enumeration" />
      <Type Name="ScrollOrientation" Kind="Enumeration" />
      <Type Name="ShortcutKeyRequestArgs" Kind="Class" />
      <Type Name="SlidableListItem" Kind="Class" />
      <Type Name="StaggeredPanel" Kind="Class" />
      <Type Name="SurfaceDialTextboxHelper" Kind="Class" />
      <Type Name="SwipeStatus" Kind="Enumeration" />
      <Type Name="SwipeStatusChangedEventArgs" Kind="Class" />
      <Type Name="TextBoxMask" Kind="Class" />
      <Type Name="TextBoxRegex" Kind="Class" />
      <Type Name="TextToolbar" Kind="Class" />
      <Type Name="TextToolbarStrings" Kind="Class" />
      <Type Name="TileControl" Kind="Class" />
      <Type Name="WrapPanel" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Controls.Markdown.Render">
      <Type Name="ICodeBlockResolver" Kind="Interface" />
      <Type Name="IImageResolver" Kind="Interface" />
      <Type Name="ILinkRegister" Kind="Interface" />
      <Type Name="InlineRenderContext" Kind="Class" />
      <Type Name="MarkdownRenderer" Kind="Class" />
      <Type Name="RenderContext" Kind="Class" />
      <Type Name="RenderContextIncorrectException" Kind="Class" />
      <Type Name="UIElementCollectionRenderContext" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Controls.Microsoft_Toolkit_Uwp_UI_Controls_XamlTypeInfo">
      <Type Name="XamlMetaDataProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarButtons">
      <Type Name="ButtonMap" Kind="Class" />
      <Type Name="ButtonType" Kind="Enumeration" />
      <Type Name="DefaultButton" Kind="Class" />
      <Type Name="DefaultButtonModificationList" Kind="Class" />
      <Type Name="IToolbarItem" Kind="Interface" />
      <Type Name="ToolbarButton" Kind="Class" />
      <Type Name="ToolbarSeparator" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarButtons.Common">
      <Type Name="CommonButtons" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarFormats">
      <Type Name="ButtonActions" Kind="Class" />
      <Type Name="Format" Kind="Enumeration" />
      <Type Name="Formatter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarFormats.MarkDown">
      <Type Name="MarkDownButtonActions" Kind="Class" />
      <Type Name="MarkDownFormatter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarFormats.RichText">
      <Type Name="RichTextButtonActions" Kind="Class" />
      <Type Name="RichTextFormatter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Controls.TextToolbarSymbols">
      <Type Name="List" Kind="Class" />
      <Type Name="NumberedList" Kind="Class" />
      <Type Name="Symbol" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Converters">
      <Type Name="BoolNegationConverter" Kind="Class" />
      <Type Name="BoolToObjectConverter" Kind="Class" />
      <Type Name="BoolToVisibilityConverter" Kind="Class" />
      <Type Name="CollectionVisibilityConverter" Kind="Class" />
      <Type Name="EmptyCollectionToObjectConverter" Kind="Class" />
      <Type Name="EmptyObjectToObjectConverter" Kind="Class" />
      <Type Name="EmptyStringToObjectConverter" Kind="Class" />
      <Type Name="FormatStringConverter" Kind="Class" />
      <Type Name="ResourceNameToResourceStringConverter" Kind="Class" />
      <Type Name="StringFormatConverter" Kind="Class" />
      <Type Name="StringVisibilityConverter" Kind="Class" />
      <Type Name="ToolbarFormatActiveConverter" Kind="Class" />
      <Type Name="VisibilityToBoolConverter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Extensions">
      <Type Name="ApplicationView" Kind="Class" />
      <Type Name="ApplicationViewExtensions" Kind="Class" />
      <Type Name="FrameworkElementExtensions" Kind="Class" />
      <Type Name="Hyperlink" Kind="Class" />
      <Type Name="ListViewBase" Kind="Class" />
      <Type Name="ListViewBase+StretchDirection" Kind="Enumeration" />
      <Type Name="ListViewExtensions" Kind="Class" />
      <Type Name="LogicalTree" Kind="Class" />
      <Type Name="Mouse" Kind="Class" />
      <Type Name="NavigationViewExtensions" Kind="Class" />
      <Type Name="ScrollViewerEx" Kind="Class" />
      <Type Name="StatusBar" Kind="Class" />
      <Type Name="StatusBarExtensions" Kind="Class" />
      <Type Name="StretchDirection" Kind="Enumeration" />
      <Type Name="SurfaceDialTextbox" Kind="Class" />
      <Type Name="TextBoxMask" Kind="Class" />
      <Type Name="TextBoxRegex" Kind="Class" />
      <Type Name="TextBoxRegex+ValidationMode" Kind="Enumeration" />
      <Type Name="TextBoxRegex+ValidationType" Kind="Enumeration" />
      <Type Name="TitleBar" Kind="Class" />
      <Type Name="TitleBarExtensions" Kind="Class" />
      <Type Name="VisualEx" Kind="Class" />
      <Type Name="VisualExtensions" Kind="Class" />
      <Type Name="VisualTree" Kind="Class" />
      <Type Name="WebView" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Helpers">
      <Type Name="BindableValueHolder" Kind="Class" />
      <Type Name="DependencyPropertyWatcher`1" DisplayName="DependencyPropertyWatcher&lt;T&gt;" Kind="Class" />
      <Type Name="ThemeChangedEvent" Kind="Delegate" />
      <Type Name="ThemeListener" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Media">
      <Type Name="AlphaMode" Kind="Enumeration" />
      <Type Name="BackdropBlurBrush" Kind="Class" />
      <Type Name="BackdropGammaTransferBrush" Kind="Class" />
      <Type Name="BackdropInvertBrush" Kind="Class" />
      <Type Name="BackdropSaturationBrush" Kind="Class" />
      <Type Name="BackdropSepiaBrush" Kind="Class" />
      <Type Name="CanvasBrushBase" Kind="Class" />
      <Type Name="ImageBlendBrush" Kind="Class" />
      <Type Name="ImageBlendMode" Kind="Enumeration" />
      <Type Name="RadialGradientBrush" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Toolkit.Uwp.UI.Microsoft_Toolkit_Uwp_UI_XamlTypeInfo">
      <Type Name="XamlMetaDataProvider" Kind="Class" />
    </Namespace>
  </Types>
  <Title>Untitled</Title>
  <ExtensionMethods>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Nullable`1" />
      </Targets>
      <Member MemberName="GetErrorString">
        <MemberSignature Language="C#" Value="public static string GetErrorString (this Nullable&lt;byte&gt; errorValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetErrorString(valuetype System.Nullable`1&lt;unsigned int8&gt; errorValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Connectivity.GattProtocolErrorParser.GetErrorString(System.Nullable{System.Byte})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetErrorString (errorValue As Nullable(Of Byte)) As String" />
        <MemberSignature Language="F#" Value="static member GetErrorString : Nullable&lt;byte&gt; -&gt; string" Usage="Microsoft.Toolkit.Uwp.Connectivity.GattProtocolErrorParser.GetErrorString errorValue" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ GetErrorString(Nullable&lt;System::Byte&gt; errorValue);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="errorValue" Type="System.Nullable&lt;System.Byte&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="errorValue"> the byte error value.</param>
          <summary>
            Helper to convert an Gatt error value into a string
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Connectivity.GattProtocolErrorParser" Member="M:Microsoft.Toolkit.Uwp.Connectivity.GattProtocolErrorParser.GetErrorString(System.Nullable{System.Byte})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="ToColor">
        <MemberSignature Language="C#" Value="public static Windows.UI.Color ToColor (this string colorString);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Windows.UI.Color ToColor(string colorString) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToColor(System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToColor (colorString As String) As Color" />
        <MemberSignature Language="F#" Value="static member ToColor : string -&gt; Windows.UI.Color" Usage="Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToColor colorString" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Windows::UI::Color ToColor(System::String ^ colorString);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.UI.Color</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="colorString" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="colorString">The color string. Any format used in XAML should work.</param>
          <summary>
            Returns a color based on XAML color string.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.ColorHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToColor(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Color" />
      </Targets>
      <Member MemberName="ToHex">
        <MemberSignature Language="C#" Value="public static string ToHex (this Windows.UI.Color color);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToHex(valuetype Windows.UI.Color color) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToHex(Windows.UI.Color)" />
        <MemberSignature Language="F#" Value="static member ToHex : Windows.UI.Color -&gt; string" Usage="Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToHex color" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ ToHex(Windows::UI::Color color);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="color" Type="Windows.UI.Color" RefType="this" />
        </Parameters>
        <Docs>
          <param name="color">The Color to convert.</param>
          <summary>
            Converts a Color value to a string representation of the value in hexadecimal.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.ColorHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToHex(Windows.UI.Color)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Color" />
      </Targets>
      <Member MemberName="ToHsl">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.HslColor ToHsl (this Windows.UI.Color color);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Toolkit.Uwp.HslColor ToHsl(valuetype Windows.UI.Color color) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToHsl(Windows.UI.Color)" />
        <MemberSignature Language="F#" Value="static member ToHsl : Windows.UI.Color -&gt; Microsoft.Toolkit.Uwp.HslColor" Usage="Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToHsl color" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Toolkit::Uwp::HslColor ToHsl(Windows::UI::Color color);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.HslColor</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="color" Type="Windows.UI.Color" RefType="this" />
        </Parameters>
        <Docs>
          <param name="color">The Color to convert.</param>
          <summary>
            Converts an RGBA Color the HSL representation.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.ColorHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToHsl(Windows.UI.Color)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Color" />
      </Targets>
      <Member MemberName="ToHsv">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.HsvColor ToHsv (this Windows.UI.Color color);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Toolkit.Uwp.HsvColor ToHsv(valuetype Windows.UI.Color color) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToHsv(Windows.UI.Color)" />
        <MemberSignature Language="F#" Value="static member ToHsv : Windows.UI.Color -&gt; Microsoft.Toolkit.Uwp.HsvColor" Usage="Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToHsv color" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Toolkit::Uwp::HsvColor ToHsv(Windows::UI::Color color);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.HsvColor</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="color" Type="Windows.UI.Color" RefType="this" />
        </Parameters>
        <Docs>
          <param name="color">Color to convert.</param>
          <summary>
            Converts an RGBA Color the HSV representation.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.ColorHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToHsv(Windows.UI.Color)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Color" />
      </Targets>
      <Member MemberName="ToInt">
        <MemberSignature Language="C#" Value="public static int ToInt (this Windows.UI.Color color);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt(valuetype Windows.UI.Color color) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToInt(Windows.UI.Color)" />
        <MemberSignature Language="F#" Value="static member ToInt : Windows.UI.Color -&gt; int" Usage="Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToInt color" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int ToInt(Windows::UI::Color color);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="color" Type="Windows.UI.Color" RefType="this" />
        </Parameters>
        <Docs>
          <param name="color">the Color to convert</param>
          <summary>
            Returns the color value as a premultiplied Int32 - 4 byte ARGB structure.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.ColorHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.ColorHelper.ToInt(Windows.UI.Color)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Core.CoreDispatcher" />
      </Targets>
      <Member MemberName="AwaitableRunAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task AwaitableRunAsync (this Windows.UI.Core.CoreDispatcher dispatcher, Action function, Windows.UI.Core.CoreDispatcherPriority priority = Windows.UI.Core.CoreDispatcherPriority.Normal);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task AwaitableRunAsync(class Windows.UI.Core.CoreDispatcher dispatcher, class System.Action function, valuetype Windows.UI.Core.CoreDispatcherPriority priority) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.AwaitableRunAsync(Windows.UI.Core.CoreDispatcher,System.Action,Windows.UI.Core.CoreDispatcherPriority)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AwaitableRunAsync (dispatcher As CoreDispatcher, function As Action, Optional priority As CoreDispatcherPriority = Windows.UI.Core.CoreDispatcherPriority.Normal) As Task" />
        <MemberSignature Language="F#" Value="static member AwaitableRunAsync : Windows.UI.Core.CoreDispatcher * Action * Windows.UI.Core.CoreDispatcherPriority -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.AwaitableRunAsync (dispatcher, function, priority)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dispatcher" Type="Windows.UI.Core.CoreDispatcher" RefType="this" />
          <Parameter Name="function" Type="System.Action" />
          <Parameter Name="priority" Type="Windows.UI.Core.CoreDispatcherPriority" />
        </Parameters>
        <Docs>
          <param name="dispatcher">Dispatcher of a thread to run <paramref name="function" /></param>
          <param name="function"> Function to be executed asynchrounously on the given dispatcher</param>
          <param name="priority">Dispatcher execution priority, default is normal</param>
          <summary>
            Extension method for CoreDispatcher. Offering an actual awaitable Task with optional result that will be executed on the given dispatcher
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.AwaitableRunAsync(Windows.UI.Core.CoreDispatcher,System.Action,Windows.UI.Core.CoreDispatcherPriority)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Core.CoreDispatcher" />
      </Targets>
      <Member MemberName="AwaitableRunAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task AwaitableRunAsync (this Windows.UI.Core.CoreDispatcher dispatcher, Func&lt;System.Threading.Tasks.Task&gt; function, Windows.UI.Core.CoreDispatcherPriority priority = Windows.UI.Core.CoreDispatcherPriority.Normal);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task AwaitableRunAsync(class Windows.UI.Core.CoreDispatcher dispatcher, class System.Func`1&lt;class System.Threading.Tasks.Task&gt; function, valuetype Windows.UI.Core.CoreDispatcherPriority priority) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.AwaitableRunAsync(Windows.UI.Core.CoreDispatcher,System.Func{System.Threading.Tasks.Task},Windows.UI.Core.CoreDispatcherPriority)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AwaitableRunAsync (dispatcher As CoreDispatcher, function As Func(Of Task), Optional priority As CoreDispatcherPriority = Windows.UI.Core.CoreDispatcherPriority.Normal) As Task" />
        <MemberSignature Language="F#" Value="static member AwaitableRunAsync : Windows.UI.Core.CoreDispatcher * Func&lt;System.Threading.Tasks.Task&gt; * Windows.UI.Core.CoreDispatcherPriority -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.AwaitableRunAsync (dispatcher, function, priority)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dispatcher" Type="Windows.UI.Core.CoreDispatcher" RefType="this" />
          <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
          <Parameter Name="priority" Type="Windows.UI.Core.CoreDispatcherPriority" />
        </Parameters>
        <Docs>
          <param name="dispatcher">Dispatcher of a thread to run <paramref name="function" /></param>
          <param name="function">Asynchrounous function to be executed asynchrounously on the given dispatcher</param>
          <param name="priority">Dispatcher execution priority, default is normal</param>
          <summary>
            Extension method for CoreDispatcher. Offering an actual awaitable Task with optional result that will be executed on the given dispatcher
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.AwaitableRunAsync(Windows.UI.Core.CoreDispatcher,System.Func{System.Threading.Tasks.Task},Windows.UI.Core.CoreDispatcherPriority)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Core.CoreDispatcher" />
      </Targets>
      <Member MemberName="AwaitableRunAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;T&gt; AwaitableRunAsync&lt;T&gt; (this Windows.UI.Core.CoreDispatcher dispatcher, Func&lt;T&gt; function, Windows.UI.Core.CoreDispatcherPriority priority = Windows.UI.Core.CoreDispatcherPriority.Normal);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!T&gt; AwaitableRunAsync&lt;T&gt;(class Windows.UI.Core.CoreDispatcher dispatcher, class System.Func`1&lt;!!T&gt; function, valuetype Windows.UI.Core.CoreDispatcherPriority priority) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.AwaitableRunAsync``1(Windows.UI.Core.CoreDispatcher,System.Func{``0},Windows.UI.Core.CoreDispatcherPriority)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AwaitableRunAsync(Of T) (dispatcher As CoreDispatcher, function As Func(Of T), Optional priority As CoreDispatcherPriority = Windows.UI.Core.CoreDispatcherPriority.Normal) As Task(Of T)" />
        <MemberSignature Language="F#" Value="static member AwaitableRunAsync : Windows.UI.Core.CoreDispatcher * Func&lt;'T&gt; * Windows.UI.Core.CoreDispatcherPriority -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.AwaitableRunAsync (dispatcher, function, priority)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="dispatcher" Type="Windows.UI.Core.CoreDispatcher" RefType="this" />
          <Parameter Name="function" Type="System.Func&lt;T&gt;" />
          <Parameter Name="priority" Type="Windows.UI.Core.CoreDispatcherPriority" />
        </Parameters>
        <Docs>
          <typeparam name="T">returned data type of the function</typeparam>
          <param name="dispatcher">Dispatcher of a thread to run <paramref name="function" /></param>
          <param name="function"> Function to be executed asynchrounously on the given dispatcher</param>
          <param name="priority">Dispatcher execution priority, default is normal</param>
          <summary>
            Extension method for CoreDispatcher. Offering an actual awaitable Task with optional result that will be executed on the given dispatcher
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.AwaitableRunAsync``1(Windows.UI.Core.CoreDispatcher,System.Func{``0},Windows.UI.Core.CoreDispatcherPriority)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Core.CoreDispatcher" />
      </Targets>
      <Member MemberName="AwaitableRunAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;T&gt; AwaitableRunAsync&lt;T&gt; (this Windows.UI.Core.CoreDispatcher dispatcher, Func&lt;System.Threading.Tasks.Task&lt;T&gt;&gt; function, Windows.UI.Core.CoreDispatcherPriority priority = Windows.UI.Core.CoreDispatcherPriority.Normal);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!T&gt; AwaitableRunAsync&lt;T&gt;(class Windows.UI.Core.CoreDispatcher dispatcher, class System.Func`1&lt;class System.Threading.Tasks.Task`1&lt;!!T&gt;&gt; function, valuetype Windows.UI.Core.CoreDispatcherPriority priority) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.AwaitableRunAsync``1(Windows.UI.Core.CoreDispatcher,System.Func{System.Threading.Tasks.Task{``0}},Windows.UI.Core.CoreDispatcherPriority)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AwaitableRunAsync(Of T) (dispatcher As CoreDispatcher, function As Func(Of Task(Of T)), Optional priority As CoreDispatcherPriority = Windows.UI.Core.CoreDispatcherPriority.Normal) As Task(Of T)" />
        <MemberSignature Language="F#" Value="static member AwaitableRunAsync : Windows.UI.Core.CoreDispatcher * Func&lt;System.Threading.Tasks.Task&lt;'T&gt;&gt; * Windows.UI.Core.CoreDispatcherPriority -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.AwaitableRunAsync (dispatcher, function, priority)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="dispatcher" Type="Windows.UI.Core.CoreDispatcher" RefType="this" />
          <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&lt;T&gt;&gt;" />
          <Parameter Name="priority" Type="Windows.UI.Core.CoreDispatcherPriority" />
        </Parameters>
        <Docs>
          <typeparam name="T">returned data type of the function</typeparam>
          <param name="dispatcher">Dispatcher of a thread to run <paramref name="function" /></param>
          <param name="function">Asynchrounous function to be executed asynchrounously on the given dispatcher</param>
          <param name="priority">Dispatcher execution priority, default is normal</param>
          <summary>
            Extension method for CoreDispatcher. Offering an actual awaitable Task with optional result that will be executed on the given dispatcher
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.AwaitableRunAsync``1(Windows.UI.Core.CoreDispatcher,System.Func{System.Threading.Tasks.Task{``0}},Windows.UI.Core.CoreDispatcherPriority)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.ApplicationModel.Core.CoreApplicationView" />
      </Targets>
      <Member MemberName="ExecuteOnUIThreadAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteOnUIThreadAsync (this Windows.ApplicationModel.Core.CoreApplicationView viewToExecuteOn, Action function, Windows.UI.Core.CoreDispatcherPriority priority = Windows.UI.Core.CoreDispatcherPriority.Normal);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteOnUIThreadAsync(class Windows.ApplicationModel.Core.CoreApplicationView viewToExecuteOn, class System.Action function, valuetype Windows.UI.Core.CoreDispatcherPriority priority) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.ExecuteOnUIThreadAsync(Windows.ApplicationModel.Core.CoreApplicationView,System.Action,Windows.UI.Core.CoreDispatcherPriority)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteOnUIThreadAsync (viewToExecuteOn As CoreApplicationView, function As Action, Optional priority As CoreDispatcherPriority = Windows.UI.Core.CoreDispatcherPriority.Normal) As Task" />
        <MemberSignature Language="F#" Value="static member ExecuteOnUIThreadAsync : Windows.ApplicationModel.Core.CoreApplicationView * Action * Windows.UI.Core.CoreDispatcherPriority -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.ExecuteOnUIThreadAsync (viewToExecuteOn, function, priority)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="viewToExecuteOn" Type="Windows.ApplicationModel.Core.CoreApplicationView" RefType="this" />
          <Parameter Name="function" Type="System.Action" />
          <Parameter Name="priority" Type="Windows.UI.Core.CoreDispatcherPriority" />
        </Parameters>
        <Docs>
          <param name="viewToExecuteOn">View for the <paramref name="function" />  to be executed on </param>
          <param name="function">Asynchronous function to be executed asynchronously on UI thread</param>
          <param name="priority">Dispatcher execution priority, default is normal</param>
          <summary>
            Execute the given function asynchronously on given view's UI thread. Default view is the main view.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.ExecuteOnUIThreadAsync(Windows.ApplicationModel.Core.CoreApplicationView,System.Action,Windows.UI.Core.CoreDispatcherPriority)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.ApplicationModel.Core.CoreApplicationView" />
      </Targets>
      <Member MemberName="ExecuteOnUIThreadAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task ExecuteOnUIThreadAsync (this Windows.ApplicationModel.Core.CoreApplicationView viewToExecuteOn, Func&lt;System.Threading.Tasks.Task&gt; function, Windows.UI.Core.CoreDispatcherPriority priority = Windows.UI.Core.CoreDispatcherPriority.Normal);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task ExecuteOnUIThreadAsync(class Windows.ApplicationModel.Core.CoreApplicationView viewToExecuteOn, class System.Func`1&lt;class System.Threading.Tasks.Task&gt; function, valuetype Windows.UI.Core.CoreDispatcherPriority priority) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.ExecuteOnUIThreadAsync(Windows.ApplicationModel.Core.CoreApplicationView,System.Func{System.Threading.Tasks.Task},Windows.UI.Core.CoreDispatcherPriority)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteOnUIThreadAsync (viewToExecuteOn As CoreApplicationView, function As Func(Of Task), Optional priority As CoreDispatcherPriority = Windows.UI.Core.CoreDispatcherPriority.Normal) As Task" />
        <MemberSignature Language="F#" Value="static member ExecuteOnUIThreadAsync : Windows.ApplicationModel.Core.CoreApplicationView * Func&lt;System.Threading.Tasks.Task&gt; * Windows.UI.Core.CoreDispatcherPriority -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.ExecuteOnUIThreadAsync (viewToExecuteOn, function, priority)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="viewToExecuteOn" Type="Windows.ApplicationModel.Core.CoreApplicationView" RefType="this" />
          <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
          <Parameter Name="priority" Type="Windows.UI.Core.CoreDispatcherPriority" />
        </Parameters>
        <Docs>
          <param name="viewToExecuteOn">View for the <paramref name="function" />  to be executed on </param>
          <param name="function">Asynchronous function to be executed asynchronously on UI thread</param>
          <param name="priority">Dispatcher execution priority, default is normal</param>
          <summary>
            Execute the given function asynchronously on given view's UI thread. Default view is the main view.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.ExecuteOnUIThreadAsync(Windows.ApplicationModel.Core.CoreApplicationView,System.Func{System.Threading.Tasks.Task},Windows.UI.Core.CoreDispatcherPriority)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.ApplicationModel.Core.CoreApplicationView" />
      </Targets>
      <Member MemberName="ExecuteOnUIThreadAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;T&gt; ExecuteOnUIThreadAsync&lt;T&gt; (this Windows.ApplicationModel.Core.CoreApplicationView viewToExecuteOn, Func&lt;T&gt; function, Windows.UI.Core.CoreDispatcherPriority priority = Windows.UI.Core.CoreDispatcherPriority.Normal);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!T&gt; ExecuteOnUIThreadAsync&lt;T&gt;(class Windows.ApplicationModel.Core.CoreApplicationView viewToExecuteOn, class System.Func`1&lt;!!T&gt; function, valuetype Windows.UI.Core.CoreDispatcherPriority priority) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.ExecuteOnUIThreadAsync``1(Windows.ApplicationModel.Core.CoreApplicationView,System.Func{``0},Windows.UI.Core.CoreDispatcherPriority)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteOnUIThreadAsync(Of T) (viewToExecuteOn As CoreApplicationView, function As Func(Of T), Optional priority As CoreDispatcherPriority = Windows.UI.Core.CoreDispatcherPriority.Normal) As Task(Of T)" />
        <MemberSignature Language="F#" Value="static member ExecuteOnUIThreadAsync : Windows.ApplicationModel.Core.CoreApplicationView * Func&lt;'T&gt; * Windows.UI.Core.CoreDispatcherPriority -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.ExecuteOnUIThreadAsync (viewToExecuteOn, function, priority)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="viewToExecuteOn" Type="Windows.ApplicationModel.Core.CoreApplicationView" RefType="this" />
          <Parameter Name="function" Type="System.Func&lt;T&gt;" />
          <Parameter Name="priority" Type="Windows.UI.Core.CoreDispatcherPriority" />
        </Parameters>
        <Docs>
          <typeparam name="T">returned data type of the function</typeparam>
          <param name="viewToExecuteOn">View for the <paramref name="function" />  to be executed on </param>
          <param name="function">Synchronous function with return type <typeparamref name="T" /> to be executed on UI thread</param>
          <param name="priority">Dispatcher execution priority, default is normal</param>
          <summary>
            Execute the given function asynchronously on given view's UI thread. Default view is the main view.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.ExecuteOnUIThreadAsync``1(Windows.ApplicationModel.Core.CoreApplicationView,System.Func{``0},Windows.UI.Core.CoreDispatcherPriority)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.ApplicationModel.Core.CoreApplicationView" />
      </Targets>
      <Member MemberName="ExecuteOnUIThreadAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;T&gt; ExecuteOnUIThreadAsync&lt;T&gt; (this Windows.ApplicationModel.Core.CoreApplicationView viewToExecuteOn, Func&lt;System.Threading.Tasks.Task&lt;T&gt;&gt; function, Windows.UI.Core.CoreDispatcherPriority priority = Windows.UI.Core.CoreDispatcherPriority.Normal);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!T&gt; ExecuteOnUIThreadAsync&lt;T&gt;(class Windows.ApplicationModel.Core.CoreApplicationView viewToExecuteOn, class System.Func`1&lt;class System.Threading.Tasks.Task`1&lt;!!T&gt;&gt; function, valuetype Windows.UI.Core.CoreDispatcherPriority priority) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.ExecuteOnUIThreadAsync``1(Windows.ApplicationModel.Core.CoreApplicationView,System.Func{System.Threading.Tasks.Task{``0}},Windows.UI.Core.CoreDispatcherPriority)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExecuteOnUIThreadAsync(Of T) (viewToExecuteOn As CoreApplicationView, function As Func(Of Task(Of T)), Optional priority As CoreDispatcherPriority = Windows.UI.Core.CoreDispatcherPriority.Normal) As Task(Of T)" />
        <MemberSignature Language="F#" Value="static member ExecuteOnUIThreadAsync : Windows.ApplicationModel.Core.CoreApplicationView * Func&lt;System.Threading.Tasks.Task&lt;'T&gt;&gt; * Windows.UI.Core.CoreDispatcherPriority -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.ExecuteOnUIThreadAsync (viewToExecuteOn, function, priority)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="viewToExecuteOn" Type="Windows.ApplicationModel.Core.CoreApplicationView" RefType="this" />
          <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&lt;T&gt;&gt;" />
          <Parameter Name="priority" Type="Windows.UI.Core.CoreDispatcherPriority" />
        </Parameters>
        <Docs>
          <typeparam name="T">returned data type of the function</typeparam>
          <param name="viewToExecuteOn">View for the <paramref name="function" />  to be executed on </param>
          <param name="function">Asynchronous function to be executed asynchronously on UI thread</param>
          <param name="priority">Dispatcher execution priority, default is normal</param>
          <summary>
            Execute the given function asynchronously on given view's UI thread. Default view is the main view.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.DispatcherHelper.ExecuteOnUIThreadAsync``1(Windows.ApplicationModel.Core.CoreApplicationView,System.Func{System.Threading.Tasks.Task{``0}},Windows.UI.Core.CoreDispatcherPriority)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.ApplicationModel.PackageVersion" />
      </Targets>
      <Member MemberName="ToFormattedString">
        <MemberSignature Language="C#" Value="public static string ToFormattedString (this Windows.ApplicationModel.PackageVersion packageVersion);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToFormattedString(valuetype Windows.ApplicationModel.PackageVersion packageVersion) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.PackageVersionHelper.ToFormattedString(Windows.ApplicationModel.PackageVersion)" />
        <MemberSignature Language="F#" Value="static member ToFormattedString : Windows.ApplicationModel.PackageVersion -&gt; string" Usage="Microsoft.Toolkit.Uwp.Helpers.PackageVersionHelper.ToFormattedString packageVersion" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::String ^ ToFormattedString(Windows::ApplicationModel::PackageVersion packageVersion);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Platform::String ^ ToFormattedString(Windows::ApplicationModel::PackageVersion packageVersion);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="packageVersion" Type="Windows.ApplicationModel.PackageVersion" RefType="this" />
        </Parameters>
        <Docs>
          <param name="packageVersion">The PackageVersion to convert to a string</param>
          <summary>
            Returns a string representing the version number, of the format 'Major.Minor.Build.Revision'
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.PackageVersionHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.PackageVersionHelper.ToFormattedString(Windows.ApplicationModel.PackageVersion)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="ToPackageVersion">
        <MemberSignature Language="C#" Value="public static Windows.ApplicationModel.PackageVersion ToPackageVersion (this string formattedVersionNumber);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Windows.ApplicationModel.PackageVersion ToPackageVersion(string formattedVersionNumber) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.PackageVersionHelper.ToPackageVersion(System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToPackageVersion (formattedVersionNumber As String) As PackageVersion" />
        <MemberSignature Language="F#" Value="static member ToPackageVersion : string -&gt; Windows.ApplicationModel.PackageVersion" Usage="Microsoft.Toolkit.Uwp.Helpers.PackageVersionHelper.ToPackageVersion formattedVersionNumber" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Windows::ApplicationModel::PackageVersion ToPackageVersion(System::String ^ formattedVersionNumber);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Windows::ApplicationModel::PackageVersion ToPackageVersion(Platform::String ^ formattedVersionNumber);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.ApplicationModel.PackageVersion</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="formattedVersionNumber" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="formattedVersionNumber">String of the format 'Major.Minor.Build.Revision'</param>
          <summary>
            Convert a formatted string representing a version number as a PackageVersion object
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.PackageVersionHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.PackageVersionHelper.ToPackageVersion(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.Storage.StorageFolder" />
      </Targets>
      <Member MemberName="FileExistsAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; FileExistsAsync (this Windows.Storage.StorageFolder folder, string fileName, bool isRecursive = false);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; FileExistsAsync(class Windows.Storage.StorageFolder folder, string fileName, bool isRecursive) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.FileExistsAsync(Windows.Storage.StorageFolder,System.String,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FileExistsAsync (folder As StorageFolder, fileName As String, Optional isRecursive As Boolean = false) As Task(Of Boolean)" />
        <MemberSignature Language="F#" Value="static member FileExistsAsync : Windows.Storage.StorageFolder * string * bool -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.FileExistsAsync (folder, fileName, isRecursive)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="folder" Type="Windows.Storage.StorageFolder" RefType="this" />
          <Parameter Name="fileName" Type="System.String" />
          <Parameter Name="isRecursive" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="folder">
            The <see cref="T:Windows.Storage.StorageFolder" /> to look for the file in.
            </param>
          <param name="fileName">
            The <see cref="T:System.String" /> filename of the file to search for. Must include the file extension and is not case-sensitive.
            </param>
          <param name="isRecursive">
            The <see cref="T:System.Boolean" />, indicating if the subfolders should also be searched through.
            </param>
          <summary>
            Gets a value indicating whether a file exists in the current folder.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.FileExistsAsync(Windows.Storage.StorageFolder,System.String,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.Storage.StorageFile" />
      </Targets>
      <Member MemberName="ReadBytesAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;byte[]&gt; ReadBytesAsync (this Windows.Storage.StorageFile file);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; ReadBytesAsync(class Windows.Storage.StorageFile file) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.ReadBytesAsync(Windows.Storage.StorageFile)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadBytesAsync (file As StorageFile) As Task(Of Byte())" />
        <MemberSignature Language="F#" Value="static member ReadBytesAsync : Windows.Storage.StorageFile -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.ReadBytesAsync file" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ ReadBytesAsync(Windows::Storage::StorageFile ^ file);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="file" Type="Windows.Storage.StorageFile" RefType="this" />
        </Parameters>
        <Docs>
          <param name="file">
            The <see cref="T:Windows.Storage.StorageFile" />.
            </param>
          <summary>
            Gets an array of bytes from a <see cref="T:Windows.Storage.StorageFile" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.ReadBytesAsync(Windows.Storage.StorageFile)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.Storage.StorageFolder" />
      </Targets>
      <Member MemberName="ReadBytesFromFileAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;byte[]&gt; ReadBytesFromFileAsync (this Windows.Storage.StorageFolder fileLocation, string fileName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; ReadBytesFromFileAsync(class Windows.Storage.StorageFolder fileLocation, string fileName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.ReadBytesFromFileAsync(Windows.Storage.StorageFolder,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadBytesFromFileAsync (fileLocation As StorageFolder, fileName As String) As Task(Of Byte())" />
        <MemberSignature Language="F#" Value="static member ReadBytesFromFileAsync : Windows.Storage.StorageFolder * string -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.ReadBytesFromFileAsync (fileLocation, fileName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ ReadBytesFromFileAsync(Windows::Storage::StorageFolder ^ fileLocation, System::String ^ fileName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="fileLocation" Type="Windows.Storage.StorageFolder" RefType="this" />
          <Parameter Name="fileName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="fileLocation">
            The <see cref="T:Windows.Storage.StorageFolder" /> to save the file in.
            </param>
          <param name="fileName">
            The relative <see cref="T:System.String" /> file path.
            </param>
          <summary>
            Gets an array of bytes from a <see cref="T:Windows.Storage.StorageFile" /> located in the given <see cref="T:Windows.Storage.StorageFolder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.ReadBytesFromFileAsync(Windows.Storage.StorageFolder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.Storage.StorageFolder" />
      </Targets>
      <Member MemberName="ReadTextFromFileAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string&gt; ReadTextFromFileAsync (this Windows.Storage.StorageFolder fileLocation, string fileName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string&gt; ReadTextFromFileAsync(class Windows.Storage.StorageFolder fileLocation, string fileName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.ReadTextFromFileAsync(Windows.Storage.StorageFolder,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadTextFromFileAsync (fileLocation As StorageFolder, fileName As String) As Task(Of String)" />
        <MemberSignature Language="F#" Value="static member ReadTextFromFileAsync : Windows.Storage.StorageFolder * string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.ReadTextFromFileAsync (fileLocation, fileName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;System::String ^&gt; ^ ReadTextFromFileAsync(Windows::Storage::StorageFolder ^ fileLocation, System::String ^ fileName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="fileLocation" Type="Windows.Storage.StorageFolder" RefType="this" />
          <Parameter Name="fileName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="fileLocation">
            The <see cref="T:Windows.Storage.StorageFolder" /> to save the file in.
            </param>
          <param name="fileName">
            The relative <see cref="T:System.String" /> file path.
            </param>
          <summary>
            Gets a string value from a <see cref="T:Windows.Storage.StorageFile" /> located in the given <see cref="T:Windows.Storage.StorageFolder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.ReadTextFromFileAsync(Windows.Storage.StorageFolder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.Storage.StorageFolder" />
      </Targets>
      <Member MemberName="WriteBytesToFileAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Windows.Storage.StorageFile&gt; WriteBytesToFileAsync (this Windows.Storage.StorageFolder fileLocation, byte[] bytes, string fileName, Windows.Storage.CreationCollisionOption options = Windows.Storage.CreationCollisionOption.ReplaceExisting);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Windows.Storage.StorageFile&gt; WriteBytesToFileAsync(class Windows.Storage.StorageFolder fileLocation, unsigned int8[] bytes, string fileName, valuetype Windows.Storage.CreationCollisionOption options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.WriteBytesToFileAsync(Windows.Storage.StorageFolder,System.Byte[],System.String,Windows.Storage.CreationCollisionOption)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WriteBytesToFileAsync (fileLocation As StorageFolder, bytes As Byte(), fileName As String, Optional options As CreationCollisionOption = Windows.Storage.CreationCollisionOption.ReplaceExisting) As Task(Of StorageFile)" />
        <MemberSignature Language="F#" Value="static member WriteBytesToFileAsync : Windows.Storage.StorageFolder * byte[] * string * Windows.Storage.CreationCollisionOption -&gt; System.Threading.Tasks.Task&lt;Windows.Storage.StorageFile&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.WriteBytesToFileAsync (fileLocation, bytes, fileName, options)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Windows.Storage.StorageFile&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="fileLocation" Type="Windows.Storage.StorageFolder" RefType="this" />
          <Parameter Name="bytes" Type="System.Byte[]" />
          <Parameter Name="fileName" Type="System.String" />
          <Parameter Name="options" Type="Windows.Storage.CreationCollisionOption" />
        </Parameters>
        <Docs>
          <param name="fileLocation">
            The <see cref="T:Windows.Storage.StorageFolder" /> to save the file in.
            </param>
          <param name="bytes">
            The <see cref="T:System.Byte" /> array to save to the file.
            </param>
          <param name="fileName">
            The <see cref="T:System.String" /> name for the file.
            </param>
          <param name="options">
            The creation collision options. Default is ReplaceExisting.
            </param>
          <summary>
            Saves an array of bytes to a <see cref="T:Windows.Storage.StorageFile" /> in the given <see cref="T:Windows.Storage.StorageFolder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.WriteBytesToFileAsync(Windows.Storage.StorageFolder,System.Byte[],System.String,Windows.Storage.CreationCollisionOption)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.Storage.StorageFolder" />
      </Targets>
      <Member MemberName="WriteTextToFileAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Windows.Storage.StorageFile&gt; WriteTextToFileAsync (this Windows.Storage.StorageFolder fileLocation, string text, string fileName, Windows.Storage.CreationCollisionOption options = Windows.Storage.CreationCollisionOption.ReplaceExisting);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Windows.Storage.StorageFile&gt; WriteTextToFileAsync(class Windows.Storage.StorageFolder fileLocation, string text, string fileName, valuetype Windows.Storage.CreationCollisionOption options) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.WriteTextToFileAsync(Windows.Storage.StorageFolder,System.String,System.String,Windows.Storage.CreationCollisionOption)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WriteTextToFileAsync (fileLocation As StorageFolder, text As String, fileName As String, Optional options As CreationCollisionOption = Windows.Storage.CreationCollisionOption.ReplaceExisting) As Task(Of StorageFile)" />
        <MemberSignature Language="F#" Value="static member WriteTextToFileAsync : Windows.Storage.StorageFolder * string * string * Windows.Storage.CreationCollisionOption -&gt; System.Threading.Tasks.Task&lt;Windows.Storage.StorageFile&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.WriteTextToFileAsync (fileLocation, text, fileName, options)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Windows.Storage.StorageFile&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="fileLocation" Type="Windows.Storage.StorageFolder" RefType="this" />
          <Parameter Name="text" Type="System.String" />
          <Parameter Name="fileName" Type="System.String" />
          <Parameter Name="options" Type="Windows.Storage.CreationCollisionOption" />
        </Parameters>
        <Docs>
          <param name="fileLocation">
            The <see cref="T:Windows.Storage.StorageFolder" /> to save the file in.
            </param>
          <param name="text">
            The <see cref="T:System.String" /> value to save to the file.
            </param>
          <param name="fileName">
            The <see cref="T:System.String" /> name for the file.
            </param>
          <param name="options">
            The creation collision options. Default is ReplaceExisting.
            </param>
          <summary>
            Saves a string value to a <see cref="T:Windows.Storage.StorageFile" /> in the given <see cref="T:Windows.Storage.StorageFolder" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.StorageFileHelper.WriteTextToFileAsync(Windows.Storage.StorageFolder,System.String,System.String,Windows.Storage.CreationCollisionOption)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Uri" />
      </Targets>
      <Member MemberName="GetHttpStreamAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Windows.Storage.Streams.IRandomAccessStream&gt; GetHttpStreamAsync (this Uri uri, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Windows.Storage.Streams.IRandomAccessStream&gt; GetHttpStreamAsync(class System.Uri uri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StreamHelper.GetHttpStreamAsync(System.Uri,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member GetHttpStreamAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Windows.Storage.Streams.IRandomAccessStream&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StreamHelper.GetHttpStreamAsync (uri, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Windows.Storage.Streams.IRandomAccessStream&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="uri" Type="System.Uri" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="uri">Uri to request.</param>
          <param name="cancellationToken">instance of <see cref="T:System.Threading.CancellationToken" /></param>
          <summary>
            Get the response stream returned by a HTTP get request.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.StreamHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.StreamHelper.GetHttpStreamAsync(System.Uri,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Uri" />
      </Targets>
      <Member MemberName="GetHttpStreamToStorageFileAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task GetHttpStreamToStorageFileAsync (this Uri uri, Windows.Storage.StorageFile targetFile);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task GetHttpStreamToStorageFileAsync(class System.Uri uri, class Windows.Storage.StorageFile targetFile) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StreamHelper.GetHttpStreamToStorageFileAsync(System.Uri,Windows.Storage.StorageFile)" />
        <MemberSignature Language="F#" Value="static member GetHttpStreamToStorageFileAsync : Uri * Windows.Storage.StorageFile -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Toolkit.Uwp.Helpers.StreamHelper.GetHttpStreamToStorageFileAsync (uri, targetFile)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task ^ GetHttpStreamToStorageFileAsync(Uri ^ uri, Windows::Storage::StorageFile ^ targetFile);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="uri" Type="System.Uri" RefType="this" />
          <Parameter Name="targetFile" Type="Windows.Storage.StorageFile" />
        </Parameters>
        <Docs>
          <param name="uri">Uri to request.</param>
          <param name="targetFile">StorageFile to save the stream to.</param>
          <summary>
            Get the response stream returned by a HTTP get request and save it to a local file.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.StreamHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.StreamHelper.GetHttpStreamToStorageFileAsync(System.Uri,Windows.Storage.StorageFile)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.Storage.StorageFolder" />
      </Targets>
      <Member MemberName="IsFileExistsAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; IsFileExistsAsync (this Windows.Storage.StorageFolder workingFolder, string fileName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; IsFileExistsAsync(class Windows.Storage.StorageFolder workingFolder, string fileName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StreamHelper.IsFileExistsAsync(Windows.Storage.StorageFolder,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsFileExistsAsync (workingFolder As StorageFolder, fileName As String) As Task(Of Boolean)" />
        <MemberSignature Language="F#" Value="static member IsFileExistsAsync : Windows.Storage.StorageFolder * string -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StreamHelper.IsFileExistsAsync (workingFolder, fileName)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ IsFileExistsAsync(Windows::Storage::StorageFolder ^ workingFolder, System::String ^ fileName);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="workingFolder" Type="Windows.Storage.StorageFolder" RefType="this" />
          <Parameter Name="fileName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="workingFolder">Folder to use.</param>
          <param name="fileName">Relative name of the file to open. Can contains subfolders.</param>
          <summary>
            Test if a file exists in the application local folder.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.StreamHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.StreamHelper.IsFileExistsAsync(Windows.Storage.StorageFolder,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.Storage.Streams.IRandomAccessStream" />
      </Targets>
      <Member MemberName="ReadTextAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string&gt; ReadTextAsync (this Windows.Storage.Streams.IRandomAccessStream stream, System.Text.Encoding encoding = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string&gt; ReadTextAsync(class Windows.Storage.Streams.IRandomAccessStream stream, class System.Text.Encoding encoding) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StreamHelper.ReadTextAsync(Windows.Storage.Streams.IRandomAccessStream,System.Text.Encoding)" />
        <MemberSignature Language="F#" Value="static member ReadTextAsync : Windows.Storage.Streams.IRandomAccessStream * System.Text.Encoding -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StreamHelper.ReadTextAsync (stream, encoding)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stream" Type="Windows.Storage.Streams.IRandomAccessStream" RefType="this" />
          <Parameter Name="encoding" Type="System.Text.Encoding" />
        </Parameters>
        <Docs>
          <param name="stream">Stream to read from.</param>
          <param name="encoding">Encoding to use. Can be set to null (ASCII will be used in this case).</param>
          <summary>
            Read stream content as a string.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.Helpers.StreamHelper" Member="M:Microsoft.Toolkit.Uwp.Helpers.StreamHelper.ReadTextAsync(Windows.Storage.Streams.IRandomAccessStream,System.Text.Encoding)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.Media.Animation.Storyboard" />
      </Targets>
      <Member MemberName="BeginAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task BeginAsync (this Windows.UI.Xaml.Media.Animation.Storyboard storyboard);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task BeginAsync(class Windows.UI.Xaml.Media.Animation.Storyboard storyboard) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.BeginAsync(Windows.UI.Xaml.Media.Animation.Storyboard)" />
        <MemberSignature Language="F#" Value="static member BeginAsync : Windows.UI.Xaml.Media.Animation.Storyboard -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.BeginAsync storyboard" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task ^ BeginAsync(Windows::UI::Xaml::Media::Animation::Storyboard ^ storyboard);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="storyboard" Type="Windows.UI.Xaml.Media.Animation.Storyboard" RefType="this" />
        </Parameters>
        <Docs>
          <param name="storyboard">The storyoard to be started</param>
          <summary>
            Begins a Storyboard animation and returns a task that completes when the
            animaton is complete
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.BeginAsync(Windows.UI.Xaml.Media.Animation.Storyboard)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" />
      </Targets>
      <Member MemberName="Blur">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Blur (this Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, double value = 0, double duration = 500, double delay = 0, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Blur(class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, float64 value, float64 duration, float64 delay, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Blur(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Double,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
        <MemberSignature Language="F#" Value="static member Blur : Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet * double * double * double * Microsoft.Toolkit.Uwp.UI.Animations.EasingType -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Blur (animationSet, value, duration, delay, easingType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="animationSet" Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" RefType="this" />
          <Parameter Name="value" Type="System.Double" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
        </Parameters>
        <Docs>
          <param name="animationSet">The animation set.</param>
          <param name="value">The blur amount.</param>
          <param name="duration">The duration in milliseconds.</param>
          <param name="delay">The delay. (ignored if duration == 0)</param>
          <param name="easingType">The easing function</param>
          <summary>
            Animates the gaussian blur of the the UIElement.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Blur(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Double,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.FrameworkElement" />
      </Targets>
      <Member MemberName="Blur">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Blur (this Windows.UI.Xaml.FrameworkElement associatedObject, double value = 0, double duration = 500, double delay = 0, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Blur(class Windows.UI.Xaml.FrameworkElement associatedObject, float64 value, float64 duration, float64 delay, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Blur(Windows.UI.Xaml.FrameworkElement,System.Double,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
        <MemberSignature Language="F#" Value="static member Blur : Windows.UI.Xaml.FrameworkElement * double * double * double * Microsoft.Toolkit.Uwp.UI.Animations.EasingType -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Blur (associatedObject, value, duration, delay, easingType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="associatedObject" Type="Windows.UI.Xaml.FrameworkElement" RefType="this" />
          <Parameter Name="value" Type="System.Double" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
        </Parameters>
        <Docs>
          <param name="associatedObject">The associated object.</param>
          <param name="value">The blur amount.</param>
          <param name="duration">The duration in milliseconds.</param>
          <param name="delay">The delay. (ignored if duration == 0)</param>
          <param name="easingType">The easing function</param>
          <summary>
            Animates the gaussian blur of the the UIElement.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Blur(Windows.UI.Xaml.FrameworkElement,System.Double,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" />
      </Targets>
      <Member MemberName="Fade">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Fade (this Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, float value = 0, double duration = 500, double delay = 0, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Fade(class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, float32 value, float64 duration, float64 delay, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Fade(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
        <MemberSignature Language="F#" Value="static member Fade : Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet * single * double * double * Microsoft.Toolkit.Uwp.UI.Animations.EasingType -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Fade (animationSet, value, duration, delay, easingType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="animationSet" Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" RefType="this" />
          <Parameter Name="value" Type="System.Single" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
        </Parameters>
        <Docs>
          <param name="animationSet">The animation set.</param>
          <param name="value">The fade value, between 0 and 1.</param>
          <param name="duration">The duration in milliseconds.</param>
          <param name="delay">The delay. (ignored if duration == 0)</param>
          <param name="easingType">Used to describe how the animation interpolates between keyframes.</param>
          <summary>
            Animates the opacity of the the UIElement.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Fade(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.UIElement" />
      </Targets>
      <Member MemberName="Fade">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Fade (this Windows.UI.Xaml.UIElement associatedObject, float value = 0, double duration = 500, double delay = 0, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Fade(class Windows.UI.Xaml.UIElement associatedObject, float32 value, float64 duration, float64 delay, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Fade(Windows.UI.Xaml.UIElement,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
        <MemberSignature Language="F#" Value="static member Fade : Windows.UI.Xaml.UIElement * single * double * double * Microsoft.Toolkit.Uwp.UI.Animations.EasingType -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Fade (associatedObject, value, duration, delay, easingType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="associatedObject" Type="Windows.UI.Xaml.UIElement" RefType="this" />
          <Parameter Name="value" Type="System.Single" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
        </Parameters>
        <Docs>
          <param name="associatedObject">The UI Element to change the opacity of.</param>
          <param name="value">The fade value, between 0 and 1.</param>
          <param name="duration">The duration in milliseconds.</param>
          <param name="delay">The delay. (ignored if duration == 0)</param>
          <param name="easingType">Used to describe how the animation interpolates between keyframes.</param>
          <summary>
            Animates the opacity of the the UIElement.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Fade(Windows.UI.Xaml.UIElement,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" />
      </Targets>
      <Member MemberName="Light">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Light (this Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, double distance = 0, double duration = 500, double delay = 0, Nullable&lt;Windows.UI.Color&gt; color = null, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Light(class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, float64 distance, float64 duration, float64 delay, valuetype System.Nullable`1&lt;valuetype Windows.UI.Color&gt; color, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Light(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Double,System.Double,System.Double,System.Nullable{Windows.UI.Color},Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
        <MemberSignature Language="F#" Value="static member Light : Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet * double * double * double * Nullable&lt;Windows.UI.Color&gt; * Microsoft.Toolkit.Uwp.UI.Animations.EasingType -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Light (animationSet, distance, duration, delay, color, easingType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="animationSet" Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" RefType="this" />
          <Parameter Name="distance" Type="System.Double" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="color" Type="System.Nullable&lt;Windows.UI.Color&gt;" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
        </Parameters>
        <Docs>
          <param name="animationSet">The animation set.</param>
          <param name="distance">The distance of the light.</param>
          <param name="duration">The duration in milliseconds.</param>
          <param name="delay">The delay. (ignored if duration == 0)</param>
          <param name="color">The color of the spotlight.</param>
          <param name="easingType">The easing function</param>
          <summary>
            Animates a point light and it's distance.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Light(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Double,System.Double,System.Double,System.Nullable{Windows.UI.Color},Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.FrameworkElement" />
      </Targets>
      <Member MemberName="Light">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Light (this Windows.UI.Xaml.FrameworkElement associatedObject, double distance = 0, double duration = 500, double delay = 0, Nullable&lt;Windows.UI.Color&gt; color = null, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Light(class Windows.UI.Xaml.FrameworkElement associatedObject, float64 distance, float64 duration, float64 delay, valuetype System.Nullable`1&lt;valuetype Windows.UI.Color&gt; color, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Light(Windows.UI.Xaml.FrameworkElement,System.Double,System.Double,System.Double,System.Nullable{Windows.UI.Color},Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
        <MemberSignature Language="F#" Value="static member Light : Windows.UI.Xaml.FrameworkElement * double * double * double * Nullable&lt;Windows.UI.Color&gt; * Microsoft.Toolkit.Uwp.UI.Animations.EasingType -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Light (associatedObject, distance, duration, delay, color, easingType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="associatedObject" Type="Windows.UI.Xaml.FrameworkElement" RefType="this" />
          <Parameter Name="distance" Type="System.Double" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="color" Type="System.Nullable&lt;Windows.UI.Color&gt;" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
        </Parameters>
        <Docs>
          <param name="associatedObject">The associated object.</param>
          <param name="distance">The value.</param>
          <param name="duration">The duration.</param>
          <param name="delay">The delay.</param>
          <param name="color">The color of the spotlight.</param>
          <param name="easingType">The easing function</param>
          <summary>
            Animates a point light and it's distance.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Light(Windows.UI.Xaml.FrameworkElement,System.Double,System.Double,System.Double,System.Nullable{Windows.UI.Color},Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" />
      </Targets>
      <Member MemberName="Offset">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Offset (this Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, float offsetX = 0, float offsetY = 0, double duration = 500, double delay = 0, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Offset(class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, float32 offsetX, float32 offsetY, float64 duration, float64 delay, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Offset(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Single,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
        <MemberSignature Language="F#" Value="static member Offset : Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet * single * single * double * double * Microsoft.Toolkit.Uwp.UI.Animations.EasingType -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Offset (animationSet, offsetX, offsetY, duration, delay, easingType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="animationSet" Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" RefType="this" />
          <Parameter Name="offsetX" Type="System.Single" />
          <Parameter Name="offsetY" Type="System.Single" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
        </Parameters>
        <Docs>
          <param name="animationSet">The animation set.</param>
          <param name="offsetX">The offset on the x axis.</param>
          <param name="offsetY">The offset on the y axis.</param>
          <param name="duration">The duration in milliseconds.</param>
          <param name="delay">The delay in milliseconds. (ignored if duration == 0)</param>
          <param name="easingType">Used to describe how the animation interpolates between keyframes.</param>
          <summary>
            Animates the offset of the the UIElement.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Offset(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Single,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.UIElement" />
      </Targets>
      <Member MemberName="Offset">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Offset (this Windows.UI.Xaml.UIElement associatedObject, float offsetX = 0, float offsetY = 0, double duration = 500, double delay = 0, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Offset(class Windows.UI.Xaml.UIElement associatedObject, float32 offsetX, float32 offsetY, float64 duration, float64 delay, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Offset(Windows.UI.Xaml.UIElement,System.Single,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
        <MemberSignature Language="F#" Value="static member Offset : Windows.UI.Xaml.UIElement * single * single * double * double * Microsoft.Toolkit.Uwp.UI.Animations.EasingType -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Offset (associatedObject, offsetX, offsetY, duration, delay, easingType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="associatedObject" Type="Windows.UI.Xaml.UIElement" RefType="this" />
          <Parameter Name="offsetX" Type="System.Single" />
          <Parameter Name="offsetY" Type="System.Single" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
        </Parameters>
        <Docs>
          <param name="associatedObject">The specified UI Element.</param>
          <param name="offsetX">The offset on the x axis.</param>
          <param name="offsetY">The offset on the y axis.</param>
          <param name="duration">The duration in milliseconds.</param>
          <param name="delay">The delay in milliseconds. (ignored if duration == 0)</param>
          <param name="easingType">Used to describe how the animation interpolates between keyframes.</param>
          <summary>
            Animates the offset of the the UIElement.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Offset(Windows.UI.Xaml.UIElement,System.Single,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" />
      </Targets>
      <Member MemberName="Rotate">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Rotate (this Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, float value = 0, float centerX = 0, float centerY = 0, double duration = 500, double delay = 0, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Rotate(class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, float32 value, float32 centerX, float32 centerY, float64 duration, float64 delay, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Rotate(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Single,System.Single,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
        <MemberSignature Language="F#" Value="static member Rotate : Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet * single * single * single * double * double * Microsoft.Toolkit.Uwp.UI.Animations.EasingType -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Rotate (animationSet, value, centerX, centerY, duration, delay, easingType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="animationSet" Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" RefType="this" />
          <Parameter Name="value" Type="System.Single" />
          <Parameter Name="centerX" Type="System.Single" />
          <Parameter Name="centerY" Type="System.Single" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
        </Parameters>
        <Docs>
          <param name="animationSet">The animation set.</param>
          <param name="value">The value in degrees to rotate.</param>
          <param name="centerX">The center x in pixels.</param>
          <param name="centerY">The center y in pixels.</param>
          <param name="duration">The duration in milliseconds.</param>
          <param name="delay">The delay in milliseconds. (ignored if duration == 0)</param>
          <param name="easingType">Used to describe how the animation interpolates between keyframes.</param>
          <summary>
            Animates the rotation in degrees of the the UIElement.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Rotate(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Single,System.Single,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.UIElement" />
      </Targets>
      <Member MemberName="Rotate">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Rotate (this Windows.UI.Xaml.UIElement associatedObject, float value = 0, float centerX = 0, float centerY = 0, double duration = 500, double delay = 0, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Rotate(class Windows.UI.Xaml.UIElement associatedObject, float32 value, float32 centerX, float32 centerY, float64 duration, float64 delay, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Rotate(Windows.UI.Xaml.UIElement,System.Single,System.Single,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
        <MemberSignature Language="F#" Value="static member Rotate : Windows.UI.Xaml.UIElement * single * single * single * double * double * Microsoft.Toolkit.Uwp.UI.Animations.EasingType -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Rotate (associatedObject, value, centerX, centerY, duration, delay, easingType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="associatedObject" Type="Windows.UI.Xaml.UIElement" RefType="this" />
          <Parameter Name="value" Type="System.Single" />
          <Parameter Name="centerX" Type="System.Single" />
          <Parameter Name="centerY" Type="System.Single" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
        </Parameters>
        <Docs>
          <param name="associatedObject">The UI Element to rotate.</param>
          <param name="value">The value in degrees to rotate.</param>
          <param name="centerX">The center x in pixels.</param>
          <param name="centerY">The center y in pixels.</param>
          <param name="duration">The duration in milliseconds.</param>
          <param name="delay">The delay in milliseconds. (ignored if duration == 0)</param>
          <param name="easingType">Used to describe how the animation interpolates between keyframes.</param>
          <summary>
            Animates the rotation in degrees of the the UIElement.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Rotate(Windows.UI.Xaml.UIElement,System.Single,System.Single,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" />
      </Targets>
      <Member MemberName="Saturation">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Saturation (this Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, double value = 0, double duration = 500, double delay = 0, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Saturation(class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, float64 value, float64 duration, float64 delay, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Saturation(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Double,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
        <MemberSignature Language="F#" Value="static member Saturation : Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet * double * double * double * Microsoft.Toolkit.Uwp.UI.Animations.EasingType -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Saturation (animationSet, value, duration, delay, easingType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="animationSet" Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" RefType="this" />
          <Parameter Name="value" Type="System.Double" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
        </Parameters>
        <Docs>
          <param name="animationSet">The animation set.</param>
          <param name="value">The value. 0 is desaturated, 1 is saturated.</param>
          <param name="duration">The duration in milliseconds.</param>
          <param name="delay">The delay in milliseconds.</param>
          <param name="easingType">The <see cref="T:Microsoft.Toolkit.Uwp.UI.Animations.EasingType" /></param>
          <summary>
            Saturates the visual within the animation set.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Saturation(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Double,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.FrameworkElement" />
      </Targets>
      <Member MemberName="Saturation">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Saturation (this Windows.UI.Xaml.FrameworkElement associatedObject, double value = 0, double duration = 500, double delay = 0, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Saturation(class Windows.UI.Xaml.FrameworkElement associatedObject, float64 value, float64 duration, float64 delay, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Saturation(Windows.UI.Xaml.FrameworkElement,System.Double,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
        <MemberSignature Language="F#" Value="static member Saturation : Windows.UI.Xaml.FrameworkElement * double * double * double * Microsoft.Toolkit.Uwp.UI.Animations.EasingType -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Saturation (associatedObject, value, duration, delay, easingType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="associatedObject" Type="Windows.UI.Xaml.FrameworkElement" RefType="this" />
          <Parameter Name="value" Type="System.Double" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
        </Parameters>
        <Docs>
          <param name="associatedObject">The associated object.</param>
          <param name="value">The value, between 0 and 1. 0 is desaturated, 1 is saturated.</param>
          <param name="duration">The duration in milliseconds.</param>
          <param name="delay">The delay in milliseconds.</param>
          <param name="easingType">The <see cref="T:Microsoft.Toolkit.Uwp.UI.Animations.EasingType" /></param>
          <summary>
            Saturates the FrameworkElement.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Saturation(Windows.UI.Xaml.FrameworkElement,System.Double,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" />
      </Targets>
      <Member MemberName="Scale">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Scale (this Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, float scaleX = 1, float scaleY = 1, float centerX = 0, float centerY = 0, double duration = 500, double delay = 0, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Scale(class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet animationSet, float32 scaleX, float32 scaleY, float32 centerX, float32 centerY, float64 duration, float64 delay, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Scale(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Single,System.Single,System.Single,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
        <MemberSignature Language="F#" Value="static member Scale : Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet * single * single * single * single * double * double * Microsoft.Toolkit.Uwp.UI.Animations.EasingType -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Scale (animationSet, scaleX, scaleY, centerX, centerY, duration, delay, easingType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="animationSet" Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" RefType="this" />
          <Parameter Name="scaleX" Type="System.Single" />
          <Parameter Name="scaleY" Type="System.Single" />
          <Parameter Name="centerX" Type="System.Single" />
          <Parameter Name="centerY" Type="System.Single" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
        </Parameters>
        <Docs>
          <param name="animationSet">The animationSet object.</param>
          <param name="scaleX">The scale on the x axis.</param>
          <param name="scaleY">The scale on the y axis.</param>
          <param name="centerX">The center x in pixels.</param>
          <param name="centerY">The center y in pixels.</param>
          <param name="duration">The duration in milliseconds.</param>
          <param name="delay">The delay in milliseconds. (ignored if duration == 0)</param>
          <param name="easingType">Used to describe how the animation interpolates between keyframes.</param>
          <summary>
            Animates the scale of the the specified UIElement.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Scale(Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet,System.Single,System.Single,System.Single,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.UIElement" />
      </Targets>
      <Member MemberName="Scale">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Scale (this Windows.UI.Xaml.UIElement associatedObject, float scaleX = 1, float scaleY = 1, float centerX = 0, float centerY = 0, double duration = 500, double delay = 0, Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType = Microsoft.Toolkit.Uwp.UI.Animations.EasingType.Default);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet Scale(class Windows.UI.Xaml.UIElement associatedObject, float32 scaleX, float32 scaleY, float32 centerX, float32 centerY, float64 duration, float64 delay, valuetype Microsoft.Toolkit.Uwp.UI.Animations.EasingType easingType) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Scale(Windows.UI.Xaml.UIElement,System.Single,System.Single,System.Single,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
        <MemberSignature Language="F#" Value="static member Scale : Windows.UI.Xaml.UIElement * single * single * single * single * double * double * Microsoft.Toolkit.Uwp.UI.Animations.EasingType -&gt; Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet" Usage="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Scale (associatedObject, scaleX, scaleY, centerX, centerY, duration, delay, easingType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.AnimationSet</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="associatedObject" Type="Windows.UI.Xaml.UIElement" RefType="this" />
          <Parameter Name="scaleX" Type="System.Single" />
          <Parameter Name="scaleY" Type="System.Single" />
          <Parameter Name="centerX" Type="System.Single" />
          <Parameter Name="centerY" Type="System.Single" />
          <Parameter Name="duration" Type="System.Double" />
          <Parameter Name="delay" Type="System.Double" />
          <Parameter Name="easingType" Type="Microsoft.Toolkit.Uwp.UI.Animations.EasingType" />
        </Parameters>
        <Docs>
          <param name="associatedObject">The associated UIElement.</param>
          <param name="scaleX">The scale on the x axis.</param>
          <param name="scaleY">The scale on the y axis.</param>
          <param name="centerX">The center x in pixels.</param>
          <param name="centerY">The center y in pixels.</param>
          <param name="duration">The duration in millisecond.</param>
          <param name="delay">The delay in milliseconds. (ignored if duration == 0)</param>
          <param name="easingType">Used to describe how the animation interpolates between keyframes.</param>
          <summary>
            Animates the scale of the the specified UIElement.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.AnimationExtensions.Scale(Windows.UI.Xaml.UIElement,System.Single,System.Single,System.Single,System.Single,System.Double,System.Double,Microsoft.Toolkit.Uwp.UI.Animations.EasingType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.AmbientLight" />
      </Targets>
      <Member MemberName="GetReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.Expressions.AmbientLightReferenceNode GetReference (this Windows.UI.Composition.AmbientLight compObj);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.AmbientLightReferenceNode GetReference(class Windows.UI.Composition.AmbientLight compObj) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.AmbientLight)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReference (compObj As AmbientLight) As AmbientLightReferenceNode" />
        <MemberSignature Language="F#" Value="static member GetReference : Windows.UI.Composition.AmbientLight -&gt; Microsoft.Toolkit.Uwp.UI.Animations.Expressions.AmbientLightReferenceNode" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference compObj" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Toolkit::Uwp::UI::Animations::Expressions::AmbientLightReferenceNode ^ GetReference(Windows::UI::Composition::AmbientLight ^ compObj);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Toolkit::Uwp::UI::Animations::Expressions::AmbientLightReferenceNode ^ GetReference(Windows::UI::Composition::AmbientLight ^ compObj);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.Expressions.AmbientLightReferenceNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compObj" Type="Windows.UI.Composition.AmbientLight" RefType="this" />
        </Parameters>
        <Docs>
          <param name="compObj">The comp object.</param>
          <summary>
            Create an ExpressionNode reference to this CompositionObject.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.AmbientLight)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.CompositionColorBrush" />
      </Targets>
      <Member MemberName="GetReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ColorBrushReferenceNode GetReference (this Windows.UI.Composition.CompositionColorBrush compObj);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ColorBrushReferenceNode GetReference(class Windows.UI.Composition.CompositionColorBrush compObj) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.CompositionColorBrush)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReference (compObj As CompositionColorBrush) As ColorBrushReferenceNode" />
        <MemberSignature Language="F#" Value="static member GetReference : Windows.UI.Composition.CompositionColorBrush -&gt; Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ColorBrushReferenceNode" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference compObj" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Toolkit::Uwp::UI::Animations::Expressions::ColorBrushReferenceNode ^ GetReference(Windows::UI::Composition::CompositionColorBrush ^ compObj);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Toolkit::Uwp::UI::Animations::Expressions::ColorBrushReferenceNode ^ GetReference(Windows::UI::Composition::CompositionColorBrush ^ compObj);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ColorBrushReferenceNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compObj" Type="Windows.UI.Composition.CompositionColorBrush" RefType="this" />
        </Parameters>
        <Docs>
          <param name="compObj">The comp object.</param>
          <summary>
            Create an ExpressionNode reference to this CompositionObject.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.CompositionColorBrush)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.CompositionNineGridBrush" />
      </Targets>
      <Member MemberName="GetReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.Expressions.NineGridBrushReferenceNode GetReference (this Windows.UI.Composition.CompositionNineGridBrush compObj);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.NineGridBrushReferenceNode GetReference(class Windows.UI.Composition.CompositionNineGridBrush compObj) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.CompositionNineGridBrush)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReference (compObj As CompositionNineGridBrush) As NineGridBrushReferenceNode" />
        <MemberSignature Language="F#" Value="static member GetReference : Windows.UI.Composition.CompositionNineGridBrush -&gt; Microsoft.Toolkit.Uwp.UI.Animations.Expressions.NineGridBrushReferenceNode" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference compObj" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Toolkit::Uwp::UI::Animations::Expressions::NineGridBrushReferenceNode ^ GetReference(Windows::UI::Composition::CompositionNineGridBrush ^ compObj);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Toolkit::Uwp::UI::Animations::Expressions::NineGridBrushReferenceNode ^ GetReference(Windows::UI::Composition::CompositionNineGridBrush ^ compObj);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.Expressions.NineGridBrushReferenceNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compObj" Type="Windows.UI.Composition.CompositionNineGridBrush" RefType="this" />
        </Parameters>
        <Docs>
          <param name="compObj">The comp object.</param>
          <summary>
            Create an ExpressionNode reference to this CompositionObject.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.CompositionNineGridBrush)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.CompositionPropertySet" />
      </Targets>
      <Member MemberName="GetReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.Expressions.PropertySetReferenceNode GetReference (this Windows.UI.Composition.CompositionPropertySet compObj);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.PropertySetReferenceNode GetReference(class Windows.UI.Composition.CompositionPropertySet compObj) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.CompositionPropertySet)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReference (compObj As CompositionPropertySet) As PropertySetReferenceNode" />
        <MemberSignature Language="F#" Value="static member GetReference : Windows.UI.Composition.CompositionPropertySet -&gt; Microsoft.Toolkit.Uwp.UI.Animations.Expressions.PropertySetReferenceNode" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference compObj" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Toolkit::Uwp::UI::Animations::Expressions::PropertySetReferenceNode ^ GetReference(Windows::UI::Composition::CompositionPropertySet ^ compObj);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Toolkit::Uwp::UI::Animations::Expressions::PropertySetReferenceNode ^ GetReference(Windows::UI::Composition::CompositionPropertySet ^ compObj);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.Expressions.PropertySetReferenceNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compObj" Type="Windows.UI.Composition.CompositionPropertySet" RefType="this" />
        </Parameters>
        <Docs>
          <param name="compObj">The comp object.</param>
          <summary>
            Create an ExpressionNode reference to this CompositionObject.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.CompositionPropertySet)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.CompositionSurfaceBrush" />
      </Targets>
      <Member MemberName="GetReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.Expressions.SurfaceBrushReferenceNode GetReference (this Windows.UI.Composition.CompositionSurfaceBrush compObj);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.SurfaceBrushReferenceNode GetReference(class Windows.UI.Composition.CompositionSurfaceBrush compObj) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.CompositionSurfaceBrush)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReference (compObj As CompositionSurfaceBrush) As SurfaceBrushReferenceNode" />
        <MemberSignature Language="F#" Value="static member GetReference : Windows.UI.Composition.CompositionSurfaceBrush -&gt; Microsoft.Toolkit.Uwp.UI.Animations.Expressions.SurfaceBrushReferenceNode" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference compObj" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Toolkit::Uwp::UI::Animations::Expressions::SurfaceBrushReferenceNode ^ GetReference(Windows::UI::Composition::CompositionSurfaceBrush ^ compObj);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Toolkit::Uwp::UI::Animations::Expressions::SurfaceBrushReferenceNode ^ GetReference(Windows::UI::Composition::CompositionSurfaceBrush ^ compObj);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.Expressions.SurfaceBrushReferenceNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compObj" Type="Windows.UI.Composition.CompositionSurfaceBrush" RefType="this" />
        </Parameters>
        <Docs>
          <param name="compObj">The comp object.</param>
          <summary>
            Create an ExpressionNode reference to this CompositionObject.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.CompositionSurfaceBrush)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.DistantLight" />
      </Targets>
      <Member MemberName="GetReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.Expressions.DistantLightReferenceNode GetReference (this Windows.UI.Composition.DistantLight compObj);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.DistantLightReferenceNode GetReference(class Windows.UI.Composition.DistantLight compObj) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.DistantLight)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReference (compObj As DistantLight) As DistantLightReferenceNode" />
        <MemberSignature Language="F#" Value="static member GetReference : Windows.UI.Composition.DistantLight -&gt; Microsoft.Toolkit.Uwp.UI.Animations.Expressions.DistantLightReferenceNode" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference compObj" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Toolkit::Uwp::UI::Animations::Expressions::DistantLightReferenceNode ^ GetReference(Windows::UI::Composition::DistantLight ^ compObj);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Toolkit::Uwp::UI::Animations::Expressions::DistantLightReferenceNode ^ GetReference(Windows::UI::Composition::DistantLight ^ compObj);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.Expressions.DistantLightReferenceNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compObj" Type="Windows.UI.Composition.DistantLight" RefType="this" />
        </Parameters>
        <Docs>
          <param name="compObj">The comp object.</param>
          <summary>
            Create an ExpressionNode reference to this CompositionObject.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.DistantLight)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.DropShadow" />
      </Targets>
      <Member MemberName="GetReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.Expressions.DropShadowReferenceNode GetReference (this Windows.UI.Composition.DropShadow compObj);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.DropShadowReferenceNode GetReference(class Windows.UI.Composition.DropShadow compObj) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.DropShadow)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReference (compObj As DropShadow) As DropShadowReferenceNode" />
        <MemberSignature Language="F#" Value="static member GetReference : Windows.UI.Composition.DropShadow -&gt; Microsoft.Toolkit.Uwp.UI.Animations.Expressions.DropShadowReferenceNode" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference compObj" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Toolkit::Uwp::UI::Animations::Expressions::DropShadowReferenceNode ^ GetReference(Windows::UI::Composition::DropShadow ^ compObj);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Toolkit::Uwp::UI::Animations::Expressions::DropShadowReferenceNode ^ GetReference(Windows::UI::Composition::DropShadow ^ compObj);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.Expressions.DropShadowReferenceNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compObj" Type="Windows.UI.Composition.DropShadow" RefType="this" />
        </Parameters>
        <Docs>
          <param name="compObj">The comp object.</param>
          <summary>
            Create an ExpressionNode reference to this CompositionObject.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.DropShadow)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.InsetClip" />
      </Targets>
      <Member MemberName="GetReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.Expressions.InsetClipReferenceNode GetReference (this Windows.UI.Composition.InsetClip compObj);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.InsetClipReferenceNode GetReference(class Windows.UI.Composition.InsetClip compObj) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.InsetClip)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReference (compObj As InsetClip) As InsetClipReferenceNode" />
        <MemberSignature Language="F#" Value="static member GetReference : Windows.UI.Composition.InsetClip -&gt; Microsoft.Toolkit.Uwp.UI.Animations.Expressions.InsetClipReferenceNode" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference compObj" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Toolkit::Uwp::UI::Animations::Expressions::InsetClipReferenceNode ^ GetReference(Windows::UI::Composition::InsetClip ^ compObj);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Toolkit::Uwp::UI::Animations::Expressions::InsetClipReferenceNode ^ GetReference(Windows::UI::Composition::InsetClip ^ compObj);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.Expressions.InsetClipReferenceNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compObj" Type="Windows.UI.Composition.InsetClip" RefType="this" />
        </Parameters>
        <Docs>
          <param name="compObj">The comp object.</param>
          <summary>
            Create an ExpressionNode reference to this CompositionObject.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.InsetClip)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.Interactions.InteractionTracker" />
      </Targets>
      <Member MemberName="GetReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.Expressions.InteractionTrackerReferenceNode GetReference (this Windows.UI.Composition.Interactions.InteractionTracker compObj);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.InteractionTrackerReferenceNode GetReference(class Windows.UI.Composition.Interactions.InteractionTracker compObj) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.Interactions.InteractionTracker)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReference (compObj As InteractionTracker) As InteractionTrackerReferenceNode" />
        <MemberSignature Language="F#" Value="static member GetReference : Windows.UI.Composition.Interactions.InteractionTracker -&gt; Microsoft.Toolkit.Uwp.UI.Animations.Expressions.InteractionTrackerReferenceNode" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference compObj" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Toolkit::Uwp::UI::Animations::Expressions::InteractionTrackerReferenceNode ^ GetReference(Windows::UI::Composition::Interactions::InteractionTracker ^ compObj);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Toolkit::Uwp::UI::Animations::Expressions::InteractionTrackerReferenceNode ^ GetReference(Windows::UI::Composition::Interactions::InteractionTracker ^ compObj);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.Expressions.InteractionTrackerReferenceNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compObj" Type="Windows.UI.Composition.Interactions.InteractionTracker" RefType="this" />
        </Parameters>
        <Docs>
          <param name="compObj">The comp object.</param>
          <summary>
            Create an ExpressionNode reference to this CompositionObject.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.Interactions.InteractionTracker)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.PointLight" />
      </Targets>
      <Member MemberName="GetReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.Expressions.PointLightReferenceNode GetReference (this Windows.UI.Composition.PointLight compObj);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.PointLightReferenceNode GetReference(class Windows.UI.Composition.PointLight compObj) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.PointLight)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReference (compObj As PointLight) As PointLightReferenceNode" />
        <MemberSignature Language="F#" Value="static member GetReference : Windows.UI.Composition.PointLight -&gt; Microsoft.Toolkit.Uwp.UI.Animations.Expressions.PointLightReferenceNode" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference compObj" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Toolkit::Uwp::UI::Animations::Expressions::PointLightReferenceNode ^ GetReference(Windows::UI::Composition::PointLight ^ compObj);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Toolkit::Uwp::UI::Animations::Expressions::PointLightReferenceNode ^ GetReference(Windows::UI::Composition::PointLight ^ compObj);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.Expressions.PointLightReferenceNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compObj" Type="Windows.UI.Composition.PointLight" RefType="this" />
        </Parameters>
        <Docs>
          <param name="compObj">The comp object.</param>
          <summary>
            Create an ExpressionNode reference to this CompositionObject.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.PointLight)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.SpotLight" />
      </Targets>
      <Member MemberName="GetReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.Expressions.SpotLightReferenceNode GetReference (this Windows.UI.Composition.SpotLight compObj);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.SpotLightReferenceNode GetReference(class Windows.UI.Composition.SpotLight compObj) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.SpotLight)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReference (compObj As SpotLight) As SpotLightReferenceNode" />
        <MemberSignature Language="F#" Value="static member GetReference : Windows.UI.Composition.SpotLight -&gt; Microsoft.Toolkit.Uwp.UI.Animations.Expressions.SpotLightReferenceNode" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference compObj" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Toolkit::Uwp::UI::Animations::Expressions::SpotLightReferenceNode ^ GetReference(Windows::UI::Composition::SpotLight ^ compObj);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Toolkit::Uwp::UI::Animations::Expressions::SpotLightReferenceNode ^ GetReference(Windows::UI::Composition::SpotLight ^ compObj);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.Expressions.SpotLightReferenceNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compObj" Type="Windows.UI.Composition.SpotLight" RefType="this" />
        </Parameters>
        <Docs>
          <param name="compObj">The comp object.</param>
          <summary>
            Create an ExpressionNode reference to this CompositionObject.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.SpotLight)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.Visual" />
      </Targets>
      <Member MemberName="GetReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Toolkit.Uwp.UI.Animations.Expressions.VisualReferenceNode GetReference (this Windows.UI.Composition.Visual compObj);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.VisualReferenceNode GetReference(class Windows.UI.Composition.Visual compObj) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.Visual)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetReference (compObj As Visual) As VisualReferenceNode" />
        <MemberSignature Language="F#" Value="static member GetReference : Windows.UI.Composition.Visual -&gt; Microsoft.Toolkit.Uwp.UI.Animations.Expressions.VisualReferenceNode" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference compObj" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Toolkit::Uwp::UI::Animations::Expressions::VisualReferenceNode ^ GetReference(Windows::UI::Composition::Visual ^ compObj);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::Toolkit::Uwp::UI::Animations::Expressions::VisualReferenceNode ^ GetReference(Windows::UI::Composition::Visual ^ compObj);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Toolkit.Uwp.UI.Animations.Expressions.VisualReferenceNode</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compObj" Type="Windows.UI.Composition.Visual" RefType="this" />
        </Parameters>
        <Docs>
          <param name="compObj">The comp object.</param>
          <summary>
            Create an ExpressionNode reference to this CompositionObject.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetReference(Windows.UI.Composition.Visual)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.CompositionPropertySet" />
      </Targets>
      <Member MemberName="GetSpecializedReference&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetSpecializedReference&lt;T&gt; (this Windows.UI.Composition.CompositionPropertySet ps) where T : Microsoft.Toolkit.Uwp.UI.Animations.Expressions.PropertySetReferenceNode;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetSpecializedReference&lt;(class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.PropertySetReferenceNode) T&gt;(class Windows.UI.Composition.CompositionPropertySet ps) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetSpecializedReference``1(Windows.UI.Composition.CompositionPropertySet)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSpecializedReference(Of T As PropertySetReferenceNode) (ps As CompositionPropertySet) As T" />
        <MemberSignature Language="F#" Value="static member GetSpecializedReference : Windows.UI.Composition.CompositionPropertySet -&gt; 'T (requires 'T :&gt; Microsoft.Toolkit.Uwp.UI.Animations.Expressions.PropertySetReferenceNode)" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetSpecializedReference ps" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : Microsoft::Toolkit::Uwp::UI::Animations::Expressions::PropertySetReferenceNode[System::Runtime::CompilerServices::Extension]&#xA; static T GetSpecializedReference(Windows::UI::Composition::CompositionPropertySet ^ ps);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : Microsoft::Toolkit::Uwp::UI::Animations::Expressions::PropertySetReferenceNode[System::Runtime::CompilerServices::Extension]&#xA; static T GetSpecializedReference(Windows::UI::Composition::CompositionPropertySet ^ ps);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>Microsoft.Toolkit.Uwp.UI.Animations.Expressions.PropertySetReferenceNode</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="ps" Type="Windows.UI.Composition.CompositionPropertySet" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">A class that derives from PropertySetReferenceNode.</typeparam>
          <param name="ps">The ps.</param>
          <summary>
            Create an ExpressionNode reference to this specialized PropertySet.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.GetSpecializedReference``1(Windows.UI.Composition.CompositionPropertySet)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.KeyFrameAnimation" />
      </Targets>
      <Member MemberName="InsertExpressionKeyFrame">
        <MemberSignature Language="C#" Value="public static void InsertExpressionKeyFrame (this Windows.UI.Composition.KeyFrameAnimation keyframeAnimation, float normalizedProgressKey, Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode expressionNode, Windows.UI.Composition.CompositionEasingFunction easing = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InsertExpressionKeyFrame(class Windows.UI.Composition.KeyFrameAnimation keyframeAnimation, float32 normalizedProgressKey, class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode expressionNode, class Windows.UI.Composition.CompositionEasingFunction easing) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.InsertExpressionKeyFrame(Windows.UI.Composition.KeyFrameAnimation,System.Single,Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode,Windows.UI.Composition.CompositionEasingFunction)" />
        <MemberSignature Language="F#" Value="static member InsertExpressionKeyFrame : Windows.UI.Composition.KeyFrameAnimation * single * Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode * Windows.UI.Composition.CompositionEasingFunction -&gt; unit" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.InsertExpressionKeyFrame (keyframeAnimation, normalizedProgressKey, expressionNode, easing)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="keyframeAnimation" Type="Windows.UI.Composition.KeyFrameAnimation" RefType="this" />
          <Parameter Name="normalizedProgressKey" Type="System.Single" />
          <Parameter Name="expressionNode" Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode" />
          <Parameter Name="easing" Type="Windows.UI.Composition.CompositionEasingFunction" />
        </Parameters>
        <Docs>
          <param name="keyframeAnimation">The keyframe animation.</param>
          <param name="normalizedProgressKey">The time the key frame should occur at, expressed as a percentage of the animation Duration. Allowed value is from 0.0 to 1.0.</param>
          <param name="expressionNode">The root ExpressionNode that represents the ExpressionAnimation.</param>
          <param name="easing">The easing function to use when interpolating between frames.</param>
          <summary>
            Inserts a KeyFrame whose value is calculated using the specified ExpressionNode.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.InsertExpressionKeyFrame(Windows.UI.Composition.KeyFrameAnimation,System.Single,Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode,Windows.UI.Composition.CompositionEasingFunction)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion" />
      </Targets>
      <Member MemberName="SetCondition">
        <MemberSignature Language="C#" Value="public static void SetCondition (this Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion modifier, Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode expressionNode);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCondition(class Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion modifier, class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode expressionNode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.SetCondition(Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion,Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode)" />
        <MemberSignature Language="F#" Value="static member SetCondition : Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion * Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode -&gt; unit" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.SetCondition (modifier, expressionNode)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetCondition(Windows::UI::Composition::Interactions::InteractionTrackerInertiaMotion ^ modifier, Microsoft::Toolkit::Uwp::UI::Animations::Expressions::ExpressionNode ^ expressionNode);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modifier" Type="Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion" RefType="this" />
          <Parameter Name="expressionNode" Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode" />
        </Parameters>
        <Docs>
          <param name="modifier">The modifier.</param>
          <param name="expressionNode">The root ExpressionNode that represents the ExpressionAnimation.</param>
          <summary>
            Use the value of specified ExpressionNode to determine if this inertia modifier should be chosen.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.SetCondition(Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion,Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue" />
      </Targets>
      <Member MemberName="SetCondition">
        <MemberSignature Language="C#" Value="public static void SetCondition (this Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue modifier, Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode expressionNode);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCondition(class Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue modifier, class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode expressionNode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.SetCondition(Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue,Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode)" />
        <MemberSignature Language="F#" Value="static member SetCondition : Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue * Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode -&gt; unit" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.SetCondition (modifier, expressionNode)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetCondition(Windows::UI::Composition::Interactions::InteractionTrackerInertiaRestingValue ^ modifier, Microsoft::Toolkit::Uwp::UI::Animations::Expressions::ExpressionNode ^ expressionNode);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modifier" Type="Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue" RefType="this" />
          <Parameter Name="expressionNode" Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode" />
        </Parameters>
        <Docs>
          <param name="modifier">The modifier.</param>
          <param name="expressionNode">The root ExpressionNode that represents the ExpressionAnimation.</param>
          <summary>
            Use the value of specified ExpressionNode to determine if this inertia modifier should be chosen.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.SetCondition(Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue,Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion" />
      </Targets>
      <Member MemberName="SetMotion">
        <MemberSignature Language="C#" Value="public static void SetMotion (this Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion modifier, Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode expressionNode);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetMotion(class Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion modifier, class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode expressionNode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.SetMotion(Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion,Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode)" />
        <MemberSignature Language="F#" Value="static member SetMotion : Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion * Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode -&gt; unit" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.SetMotion (modifier, expressionNode)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetMotion(Windows::UI::Composition::Interactions::InteractionTrackerInertiaMotion ^ modifier, Microsoft::Toolkit::Uwp::UI::Animations::Expressions::ExpressionNode ^ expressionNode);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modifier" Type="Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion" RefType="this" />
          <Parameter Name="expressionNode" Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode" />
        </Parameters>
        <Docs>
          <param name="modifier">The modifier.</param>
          <param name="expressionNode">The root ExpressionNode that represents the ExpressionAnimation.</param>
          <summary>
            Use the value of specified ExpressionNode to dictate the motion for this inertia modifier.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.SetMotion(Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion,Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue" />
      </Targets>
      <Member MemberName="SetRestingValue">
        <MemberSignature Language="C#" Value="public static void SetRestingValue (this Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue modifier, Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode expressionNode);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetRestingValue(class Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue modifier, class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode expressionNode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.SetRestingValue(Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue,Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode)" />
        <MemberSignature Language="F#" Value="static member SetRestingValue : Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue * Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode -&gt; unit" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.SetRestingValue (modifier, expressionNode)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetRestingValue(Windows::UI::Composition::Interactions::InteractionTrackerInertiaRestingValue ^ modifier, Microsoft::Toolkit::Uwp::UI::Animations::Expressions::ExpressionNode ^ expressionNode);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modifier" Type="Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue" RefType="this" />
          <Parameter Name="expressionNode" Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode" />
        </Parameters>
        <Docs>
          <param name="modifier">The modifier.</param>
          <param name="expressionNode">The root ExpressionNode that represents the ExpressionAnimation.</param>
          <summary>
            Use the value of specified ExpressionNode as the resting value for this inertia modifier.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.SetRestingValue(Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue,Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Composition.CompositionObject" />
      </Targets>
      <Member MemberName="StartAnimation">
        <MemberSignature Language="C#" Value="public static void StartAnimation (this Windows.UI.Composition.CompositionObject compObject, string propertyName, Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode expressionNode);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StartAnimation(class Windows.UI.Composition.CompositionObject compObject, string propertyName, class Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode expressionNode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.StartAnimation(Windows.UI.Composition.CompositionObject,System.String,Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode)" />
        <MemberSignature Language="F#" Value="static member StartAnimation : Windows.UI.Composition.CompositionObject * string * Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode -&gt; unit" Usage="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.StartAnimation (compObject, propertyName, expressionNode)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void StartAnimation(Windows::UI::Composition::CompositionObject ^ compObject, System::String ^ propertyName, Microsoft::Toolkit::Uwp::UI::Animations::Expressions::ExpressionNode ^ expressionNode);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compObject" Type="Windows.UI.Composition.CompositionObject" RefType="this" />
          <Parameter Name="propertyName" Type="System.String" />
          <Parameter Name="expressionNode" Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode" />
        </Parameters>
        <Docs>
          <param name="compObject">The comp object.</param>
          <param name="propertyName">The name of the property that the expression will target.</param>
          <param name="expressionNode">The root ExpressionNode that represents the ExpressionAnimation.</param>
          <summary>
            Connects the specified ExpressionNode with the specified property of the object.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Animations.Expressions.CompositionExtensions.StartAnimation(Windows.UI.Composition.CompositionObject,System.String,Microsoft.Toolkit.Uwp.UI.Animations.Expressions.ExpressionNode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.FrameworkElement" />
      </Targets>
      <Member MemberName="FindChild&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T FindChild&lt;T&gt; (this Windows.UI.Xaml.FrameworkElement element) where T : Windows.UI.Xaml.FrameworkElement;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T FindChild&lt;(class Windows.UI.Xaml.FrameworkElement) T&gt;(class Windows.UI.Xaml.FrameworkElement element) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindChild``1(Windows.UI.Xaml.FrameworkElement)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindChild(Of T As FrameworkElement) (element As FrameworkElement) As T" />
        <MemberSignature Language="F#" Value="static member FindChild : Windows.UI.Xaml.FrameworkElement -&gt; 'T (requires 'T :&gt; Windows.UI.Xaml.FrameworkElement)" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindChild element" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : Windows::UI::Xaml::FrameworkElement[System::Runtime::CompilerServices::Extension]&#xA; static T FindChild(Windows::UI::Xaml::FrameworkElement ^ element);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : Windows::UI::Xaml::FrameworkElement[System::Runtime::CompilerServices::Extension]&#xA; static T FindChild(Windows::UI::Xaml::FrameworkElement ^ element);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>Windows.UI.Xaml.FrameworkElement</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.FrameworkElement" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">Type to search for.</typeparam>
          <param name="element">Parent element.</param>
          <summary>
            Find first logical child control of a specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindChild``1(Windows.UI.Xaml.FrameworkElement)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.FrameworkElement" />
      </Targets>
      <Member MemberName="FindChildByName">
        <MemberSignature Language="C#" Value="public static Windows.UI.Xaml.FrameworkElement FindChildByName (this Windows.UI.Xaml.FrameworkElement element, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Windows.UI.Xaml.FrameworkElement FindChildByName(class Windows.UI.Xaml.FrameworkElement element, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindChildByName(Windows.UI.Xaml.FrameworkElement,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindChildByName (element As FrameworkElement, name As String) As FrameworkElement" />
        <MemberSignature Language="F#" Value="static member FindChildByName : Windows.UI.Xaml.FrameworkElement * string -&gt; Windows.UI.Xaml.FrameworkElement" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindChildByName (element, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Windows::UI::Xaml::FrameworkElement ^ FindChildByName(Windows::UI::Xaml::FrameworkElement ^ element, System::String ^ name);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Windows::UI::Xaml::FrameworkElement ^ FindChildByName(Windows::UI::Xaml::FrameworkElement ^ element, Platform::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.UI.Xaml.FrameworkElement</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.FrameworkElement" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="element">Parent element.</param>
          <param name="name">Name of the control to find.</param>
          <summary>
            Find logical child control using its name.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindChildByName(Windows.UI.Xaml.FrameworkElement,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.FrameworkElement" />
      </Targets>
      <Member MemberName="FindChildren&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; FindChildren&lt;T&gt; (this Windows.UI.Xaml.FrameworkElement element) where T : Windows.UI.Xaml.FrameworkElement;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; FindChildren&lt;(class Windows.UI.Xaml.FrameworkElement) T&gt;(class Windows.UI.Xaml.FrameworkElement element) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindChildren``1(Windows.UI.Xaml.FrameworkElement)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Iterator Function FindChildren(Of T As FrameworkElement) (element As FrameworkElement) As IEnumerable(Of T)" />
        <MemberSignature Language="F#" Value="static member FindChildren : Windows.UI.Xaml.FrameworkElement -&gt; seq&lt;'T (requires 'T :&gt; Windows.UI.Xaml.FrameworkElement)&gt; (requires 'T :&gt; Windows.UI.Xaml.FrameworkElement)" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindChildren element" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : Windows::UI::Xaml::FrameworkElement[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;T&gt; ^ FindChildren(Windows::UI::Xaml::FrameworkElement ^ element);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>Windows.UI.Xaml.FrameworkElement</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.FrameworkElement" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">Type to search for.</typeparam>
          <param name="element">Parent element.</param>
          <summary>
            Find all logical child controls of the specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindChildren``1(Windows.UI.Xaml.FrameworkElement)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.FrameworkElement" />
      </Targets>
      <Member MemberName="FindParent&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T FindParent&lt;T&gt; (this Windows.UI.Xaml.FrameworkElement element) where T : Windows.UI.Xaml.FrameworkElement;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T FindParent&lt;(class Windows.UI.Xaml.FrameworkElement) T&gt;(class Windows.UI.Xaml.FrameworkElement element) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindParent``1(Windows.UI.Xaml.FrameworkElement)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindParent(Of T As FrameworkElement) (element As FrameworkElement) As T" />
        <MemberSignature Language="F#" Value="static member FindParent : Windows.UI.Xaml.FrameworkElement -&gt; 'T (requires 'T :&gt; Windows.UI.Xaml.FrameworkElement)" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindParent element" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : Windows::UI::Xaml::FrameworkElement[System::Runtime::CompilerServices::Extension]&#xA; static T FindParent(Windows::UI::Xaml::FrameworkElement ^ element);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : Windows::UI::Xaml::FrameworkElement[System::Runtime::CompilerServices::Extension]&#xA; static T FindParent(Windows::UI::Xaml::FrameworkElement ^ element);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>Windows.UI.Xaml.FrameworkElement</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.FrameworkElement" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">Type to search for.</typeparam>
          <param name="element">Child element.</param>
          <summary>
            Find first logical parent control of a specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindParent``1(Windows.UI.Xaml.FrameworkElement)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.FrameworkElement" />
      </Targets>
      <Member MemberName="FindParentByName">
        <MemberSignature Language="C#" Value="public static Windows.UI.Xaml.FrameworkElement FindParentByName (this Windows.UI.Xaml.FrameworkElement element, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Windows.UI.Xaml.FrameworkElement FindParentByName(class Windows.UI.Xaml.FrameworkElement element, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindParentByName(Windows.UI.Xaml.FrameworkElement,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindParentByName (element As FrameworkElement, name As String) As FrameworkElement" />
        <MemberSignature Language="F#" Value="static member FindParentByName : Windows.UI.Xaml.FrameworkElement * string -&gt; Windows.UI.Xaml.FrameworkElement" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindParentByName (element, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Windows::UI::Xaml::FrameworkElement ^ FindParentByName(Windows::UI::Xaml::FrameworkElement ^ element, System::String ^ name);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Windows::UI::Xaml::FrameworkElement ^ FindParentByName(Windows::UI::Xaml::FrameworkElement ^ element, Platform::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.UI.Xaml.FrameworkElement</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.FrameworkElement" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="element">Child element.</param>
          <param name="name">Name of the control to find.</param>
          <summary>
            Finds the logical parent element with the given name or returns null.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.FindParentByName(Windows.UI.Xaml.FrameworkElement,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.FrameworkElement" />
      </Targets>
      <Member MemberName="GetContentControl">
        <MemberSignature Language="C#" Value="public static Windows.UI.Xaml.UIElement GetContentControl (this Windows.UI.Xaml.FrameworkElement element);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Windows.UI.Xaml.UIElement GetContentControl(class Windows.UI.Xaml.FrameworkElement element) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.GetContentControl(Windows.UI.Xaml.FrameworkElement)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetContentControl (element As FrameworkElement) As UIElement" />
        <MemberSignature Language="F#" Value="static member GetContentControl : Windows.UI.Xaml.FrameworkElement -&gt; Windows.UI.Xaml.UIElement" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.GetContentControl element" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Windows::UI::Xaml::UIElement ^ GetContentControl(Windows::UI::Xaml::FrameworkElement ^ element);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Windows::UI::Xaml::UIElement ^ GetContentControl(Windows::UI::Xaml::FrameworkElement ^ element);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.UI.Xaml.UIElement</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.FrameworkElement" RefType="this" />
        </Parameters>
        <Docs>
          <param name="element">Parent element.</param>
          <summary>
            Retrieves the Content control of this element as defined by the ContentPropertyAttribute.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.LogicalTree.GetContentControl(Windows.UI.Xaml.FrameworkElement)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="ToVector2">
        <MemberSignature Language="C#" Value="public static System.Numerics.Vector2 ToVector2 (this string str);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector2 ToVector2(string str) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualExtensions.ToVector2(System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToVector2 (str As String) As Vector2" />
        <MemberSignature Language="F#" Value="static member ToVector2 : string -&gt; System.Numerics.Vector2" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.VisualExtensions.ToVector2 str" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Numerics::Vector2 ToVector2(System::String ^ str);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Numerics.Vector2</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="str" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="str">A string in the format of "float, float"</param>
          <summary>
            Converts a <see cref="T:System.String" /> to <see cref="T:System.Numerics.Vector2" /></summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.VisualExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualExtensions.ToVector2(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="ToVector3">
        <MemberSignature Language="C#" Value="public static System.Numerics.Vector3 ToVector3 (this string str);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector3 ToVector3(string str) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualExtensions.ToVector3(System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToVector3 (str As String) As Vector3" />
        <MemberSignature Language="F#" Value="static member ToVector3 : string -&gt; System.Numerics.Vector3" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.VisualExtensions.ToVector3 str" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Numerics::Vector3 ToVector3(System::String ^ str);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Numerics.Vector3</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="str" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="str">A string in the format of "float, float, float"</param>
          <summary>
            Converts a <see cref="T:System.String" /> to <see cref="T:System.Numerics.Vector3" /></summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.VisualExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualExtensions.ToVector3(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="ToVector4">
        <MemberSignature Language="C#" Value="public static System.Numerics.Vector4 ToVector4 (this string str);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Numerics.Vector4 ToVector4(string str) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualExtensions.ToVector4(System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToVector4 (str As String) As Vector4" />
        <MemberSignature Language="F#" Value="static member ToVector4 : string -&gt; System.Numerics.Vector4" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.VisualExtensions.ToVector4 str" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Numerics::Vector4 ToVector4(System::String ^ str);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Numerics.Vector4</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="str" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="str">A string in the format of "float, float, float, float"</param>
          <summary>
            Converts a <see cref="T:System.String" /> to <see cref="T:System.Numerics.Vector4" /></summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.VisualExtensions" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualExtensions.ToVector4(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.DependencyObject" />
      </Targets>
      <Member MemberName="FindAscendant&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T FindAscendant&lt;T&gt; (this Windows.UI.Xaml.DependencyObject element) where T : Windows.UI.Xaml.DependencyObject;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T FindAscendant&lt;(class Windows.UI.Xaml.DependencyObject) T&gt;(class Windows.UI.Xaml.DependencyObject element) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindAscendant``1(Windows.UI.Xaml.DependencyObject)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindAscendant(Of T As DependencyObject) (element As DependencyObject) As T" />
        <MemberSignature Language="F#" Value="static member FindAscendant : Windows.UI.Xaml.DependencyObject -&gt; 'T (requires 'T :&gt; Windows.UI.Xaml.DependencyObject)" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindAscendant element" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : Windows::UI::Xaml::DependencyObject[System::Runtime::CompilerServices::Extension]&#xA; static T FindAscendant(Windows::UI::Xaml::DependencyObject ^ element);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : Windows::UI::Xaml::DependencyObject[System::Runtime::CompilerServices::Extension]&#xA; static T FindAscendant(Windows::UI::Xaml::DependencyObject ^ element);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>Windows.UI.Xaml.DependencyObject</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.DependencyObject" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">Type to search for.</typeparam>
          <param name="element">Child element.</param>
          <summary>
            Find first visual ascendant control of a specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindAscendant``1(Windows.UI.Xaml.DependencyObject)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.DependencyObject" />
      </Targets>
      <Member MemberName="FindAscendantByName">
        <MemberSignature Language="C#" Value="public static Windows.UI.Xaml.FrameworkElement FindAscendantByName (this Windows.UI.Xaml.DependencyObject element, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Windows.UI.Xaml.FrameworkElement FindAscendantByName(class Windows.UI.Xaml.DependencyObject element, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindAscendantByName(Windows.UI.Xaml.DependencyObject,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindAscendantByName (element As DependencyObject, name As String) As FrameworkElement" />
        <MemberSignature Language="F#" Value="static member FindAscendantByName : Windows.UI.Xaml.DependencyObject * string -&gt; Windows.UI.Xaml.FrameworkElement" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindAscendantByName (element, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Windows::UI::Xaml::FrameworkElement ^ FindAscendantByName(Windows::UI::Xaml::DependencyObject ^ element, System::String ^ name);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Windows::UI::Xaml::FrameworkElement ^ FindAscendantByName(Windows::UI::Xaml::DependencyObject ^ element, Platform::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.UI.Xaml.FrameworkElement</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.DependencyObject" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="element">Parent element.</param>
          <param name="name">Name of the control to find</param>
          <summary>
            Find visual ascendant <see cref="T:Windows.UI.Xaml.FrameworkElement" /> control using its name.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindAscendantByName(Windows.UI.Xaml.DependencyObject,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.DependencyObject" />
      </Targets>
      <Member MemberName="FindDescendant&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T FindDescendant&lt;T&gt; (this Windows.UI.Xaml.DependencyObject element) where T : Windows.UI.Xaml.DependencyObject;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T FindDescendant&lt;(class Windows.UI.Xaml.DependencyObject) T&gt;(class Windows.UI.Xaml.DependencyObject element) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindDescendant``1(Windows.UI.Xaml.DependencyObject)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindDescendant(Of T As DependencyObject) (element As DependencyObject) As T" />
        <MemberSignature Language="F#" Value="static member FindDescendant : Windows.UI.Xaml.DependencyObject -&gt; 'T (requires 'T :&gt; Windows.UI.Xaml.DependencyObject)" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindDescendant element" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : Windows::UI::Xaml::DependencyObject[System::Runtime::CompilerServices::Extension]&#xA; static T FindDescendant(Windows::UI::Xaml::DependencyObject ^ element);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : Windows::UI::Xaml::DependencyObject[System::Runtime::CompilerServices::Extension]&#xA; static T FindDescendant(Windows::UI::Xaml::DependencyObject ^ element);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>Windows.UI.Xaml.DependencyObject</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.DependencyObject" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">Type to search for.</typeparam>
          <param name="element">Parent element.</param>
          <summary>
            Find first descendant control of a specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindDescendant``1(Windows.UI.Xaml.DependencyObject)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.DependencyObject" />
      </Targets>
      <Member MemberName="FindDescendantByName">
        <MemberSignature Language="C#" Value="public static Windows.UI.Xaml.FrameworkElement FindDescendantByName (this Windows.UI.Xaml.DependencyObject element, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Windows.UI.Xaml.FrameworkElement FindDescendantByName(class Windows.UI.Xaml.DependencyObject element, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindDescendantByName(Windows.UI.Xaml.DependencyObject,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FindDescendantByName (element As DependencyObject, name As String) As FrameworkElement" />
        <MemberSignature Language="F#" Value="static member FindDescendantByName : Windows.UI.Xaml.DependencyObject * string -&gt; Windows.UI.Xaml.FrameworkElement" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindDescendantByName (element, name)" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Windows::UI::Xaml::FrameworkElement ^ FindDescendantByName(Windows::UI::Xaml::DependencyObject ^ element, System::String ^ name);" />
        <MemberSignature Language="C++ CX" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Windows::UI::Xaml::FrameworkElement ^ FindDescendantByName(Windows::UI::Xaml::DependencyObject ^ element, Platform::String ^ name);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Windows.UI.Xaml.FrameworkElement</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.DependencyObject" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="element">Parent element.</param>
          <param name="name">Name of the control to find</param>
          <summary>
            Find descendant <see cref="T:Windows.UI.Xaml.FrameworkElement" /> control using its name.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindDescendantByName(Windows.UI.Xaml.DependencyObject,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Windows.UI.Xaml.DependencyObject" />
      </Targets>
      <Member MemberName="FindDescendants&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; FindDescendants&lt;T&gt; (this Windows.UI.Xaml.DependencyObject element) where T : Windows.UI.Xaml.DependencyObject;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; FindDescendants&lt;(class Windows.UI.Xaml.DependencyObject) T&gt;(class Windows.UI.Xaml.DependencyObject element) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindDescendants``1(Windows.UI.Xaml.DependencyObject)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Iterator Function FindDescendants(Of T As DependencyObject) (element As DependencyObject) As IEnumerable(Of T)" />
        <MemberSignature Language="F#" Value="static member FindDescendants : Windows.UI.Xaml.DependencyObject -&gt; seq&lt;'T (requires 'T :&gt; Windows.UI.Xaml.DependencyObject)&gt; (requires 'T :&gt; Windows.UI.Xaml.DependencyObject)" Usage="Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindDescendants element" />
        <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : Windows::UI::Xaml::DependencyObject[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;T&gt; ^ FindDescendants(Windows::UI::Xaml::DependencyObject ^ element);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>Windows.UI.Xaml.DependencyObject</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="Windows.UI.Xaml.DependencyObject" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">Type to search for.</typeparam>
          <param name="element">Parent element.</param>
          <summary>
            Find all descendant controls of the specified type.
            </summary>
        </Docs>
        <Link Type="Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree" Member="M:Microsoft.Toolkit.Uwp.UI.Extensions.VisualTree.FindDescendants``1(Windows.UI.Xaml.DependencyObject)" />
      </Member>
    </ExtensionMethod>
  </ExtensionMethods>
</Overview>
