<Type Name="StreamHelper" FullName="Microsoft.Toolkit.Uwp.Helpers.StreamHelper">
  <TypeSignature Language="C#" Value="public static class StreamHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit StreamHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Toolkit.Uwp.Helpers.StreamHelper" />
  <TypeSignature Language="VB.NET" Value="Public Module StreamHelper" />
  <TypeSignature Language="F#" Value="type StreamHelper = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class StreamHelper abstract sealed" />
  <TypeSignature Language="C++ CX" Value="public ref class StreamHelper abstract sealed" />
  <TypeSignature Language="C++ WINRT" Value="class StreamHelper abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Toolkit.Uwp</AssemblyName>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            This class provides static helper methods for streams.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetHttpStreamAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Windows.Storage.Streams.IRandomAccessStream&gt; GetHttpStreamAsync (this Uri uri, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Windows.Storage.Streams.IRandomAccessStream&gt; GetHttpStreamAsync(class System.Uri uri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StreamHelper.GetHttpStreamAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetHttpStreamAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Windows.Storage.Streams.IRandomAccessStream&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StreamHelper.GetHttpStreamAsync (uri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.Toolkit.Uwp.Helpers.StreamHelper/&lt;GetHttpStreamAsync&gt;d__1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Windows.Storage.Streams.IRandomAccessStream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="uri">Uri to request.</param>
        <param name="cancellationToken">instance of <see cref="T:System.Threading.CancellationToken" /></param>
        <summary>
            Get the response stream returned by a HTTP get request.
            </summary>
        <returns>Response stream</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHttpStreamToStorageFileAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task GetHttpStreamToStorageFileAsync (this Uri uri, Windows.Storage.StorageFile targetFile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task GetHttpStreamToStorageFileAsync(class System.Uri uri, class Windows.Storage.StorageFile targetFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StreamHelper.GetHttpStreamToStorageFileAsync(System.Uri,Windows.Storage.StorageFile)" />
      <MemberSignature Language="F#" Value="static member GetHttpStreamToStorageFileAsync : Uri * Windows.Storage.StorageFile -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Toolkit.Uwp.Helpers.StreamHelper.GetHttpStreamToStorageFileAsync (uri, targetFile)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task ^ GetHttpStreamToStorageFileAsync(Uri ^ uri, Windows::Storage::StorageFile ^ targetFile);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.Toolkit.Uwp.Helpers.StreamHelper/&lt;GetHttpStreamToStorageFileAsync&gt;d__2))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" RefType="this" />
        <Parameter Name="targetFile" Type="Windows.Storage.StorageFile" />
      </Parameters>
      <Docs>
        <param name="uri">Uri to request.</param>
        <param name="targetFile">StorageFile to save the stream to.</param>
        <summary>
            Get the response stream returned by a HTTP get request and save it to a local file.
            </summary>
        <returns>True if success.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKnowFoldersFileStreamAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Windows.Storage.Streams.IRandomAccessStream&gt; GetKnowFoldersFileStreamAsync (Windows.Storage.KnownFolderId knownFolderId, string fileName, Windows.Storage.FileAccessMode accessMode = Windows.Storage.FileAccessMode.Read);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Windows.Storage.Streams.IRandomAccessStream&gt; GetKnowFoldersFileStreamAsync(valuetype Windows.Storage.KnownFolderId knownFolderId, string fileName, valuetype Windows.Storage.FileAccessMode accessMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StreamHelper.GetKnowFoldersFileStreamAsync(Windows.Storage.KnownFolderId,System.String,Windows.Storage.FileAccessMode)" />
      <MemberSignature Language="F#" Value="static member GetKnowFoldersFileStreamAsync : Windows.Storage.KnownFolderId * string * Windows.Storage.FileAccessMode -&gt; System.Threading.Tasks.Task&lt;Windows.Storage.Streams.IRandomAccessStream&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StreamHelper.GetKnowFoldersFileStreamAsync (knownFolderId, fileName, accessMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Windows.Storage.Streams.IRandomAccessStream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="knownFolderId" Type="Windows.Storage.KnownFolderId" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="accessMode" Type="Windows.Storage.FileAccessMode" />
      </Parameters>
      <Docs>
        <param name="knownFolderId">The well known folder ID to use</param>
        <param name="fileName">Relative name of the file to open. Can contains subfolders.</param>
        <param name="accessMode">File access mode. Default is read.</param>
        <summary>
            Return a stream to a specified file from the application local cache folder.
            </summary>
        <returns>File stream</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLocalCacheFileStreamAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Windows.Storage.Streams.IRandomAccessStream&gt; GetLocalCacheFileStreamAsync (string fileName, Windows.Storage.FileAccessMode accessMode = Windows.Storage.FileAccessMode.Read);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Windows.Storage.Streams.IRandomAccessStream&gt; GetLocalCacheFileStreamAsync(string fileName, valuetype Windows.Storage.FileAccessMode accessMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StreamHelper.GetLocalCacheFileStreamAsync(System.String,Windows.Storage.FileAccessMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLocalCacheFileStreamAsync (fileName As String, Optional accessMode As FileAccessMode = Windows.Storage.FileAccessMode.Read) As Task(Of IRandomAccessStream)" />
      <MemberSignature Language="F#" Value="static member GetLocalCacheFileStreamAsync : string * Windows.Storage.FileAccessMode -&gt; System.Threading.Tasks.Task&lt;Windows.Storage.Streams.IRandomAccessStream&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StreamHelper.GetLocalCacheFileStreamAsync (fileName, accessMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Windows.Storage.Streams.IRandomAccessStream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="accessMode" Type="Windows.Storage.FileAccessMode" />
      </Parameters>
      <Docs>
        <param name="fileName">Relative name of the file to open. Can contains subfolders.</param>
        <param name="accessMode">File access mode. Default is read.</param>
        <summary>
            Return a stream to a specified file from the application local cache folder.
            </summary>
        <returns>File stream</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLocalFileStreamAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Windows.Storage.Streams.IRandomAccessStream&gt; GetLocalFileStreamAsync (string fileName, Windows.Storage.FileAccessMode accessMode = Windows.Storage.FileAccessMode.Read);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Windows.Storage.Streams.IRandomAccessStream&gt; GetLocalFileStreamAsync(string fileName, valuetype Windows.Storage.FileAccessMode accessMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StreamHelper.GetLocalFileStreamAsync(System.String,Windows.Storage.FileAccessMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLocalFileStreamAsync (fileName As String, Optional accessMode As FileAccessMode = Windows.Storage.FileAccessMode.Read) As Task(Of IRandomAccessStream)" />
      <MemberSignature Language="F#" Value="static member GetLocalFileStreamAsync : string * Windows.Storage.FileAccessMode -&gt; System.Threading.Tasks.Task&lt;Windows.Storage.Streams.IRandomAccessStream&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StreamHelper.GetLocalFileStreamAsync (fileName, accessMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Windows.Storage.Streams.IRandomAccessStream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="accessMode" Type="Windows.Storage.FileAccessMode" />
      </Parameters>
      <Docs>
        <param name="fileName">Relative name of the file to open. Can contains subfolders.</param>
        <param name="accessMode">File access mode. Default is read.</param>
        <summary>
            Return a stream to a specified file from the application local folder.
            </summary>
        <returns>File stream</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPackagedFileStreamAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Windows.Storage.Streams.IRandomAccessStream&gt; GetPackagedFileStreamAsync (string fileName, Windows.Storage.FileAccessMode accessMode = Windows.Storage.FileAccessMode.Read);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Windows.Storage.Streams.IRandomAccessStream&gt; GetPackagedFileStreamAsync(string fileName, valuetype Windows.Storage.FileAccessMode accessMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StreamHelper.GetPackagedFileStreamAsync(System.String,Windows.Storage.FileAccessMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPackagedFileStreamAsync (fileName As String, Optional accessMode As FileAccessMode = Windows.Storage.FileAccessMode.Read) As Task(Of IRandomAccessStream)" />
      <MemberSignature Language="F#" Value="static member GetPackagedFileStreamAsync : string * Windows.Storage.FileAccessMode -&gt; System.Threading.Tasks.Task&lt;Windows.Storage.Streams.IRandomAccessStream&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StreamHelper.GetPackagedFileStreamAsync (fileName, accessMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Windows.Storage.Streams.IRandomAccessStream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="accessMode" Type="Windows.Storage.FileAccessMode" />
      </Parameters>
      <Docs>
        <param name="fileName">Relative name of the file to open. Can contains subfolders.</param>
        <param name="accessMode">File access mode. Default is read.</param>
        <summary>
            Return a stream to a specified file from the installation folder.
            </summary>
        <returns>File stream</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFileExistsAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; IsFileExistsAsync (this Windows.Storage.StorageFolder workingFolder, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; IsFileExistsAsync(class Windows.Storage.StorageFolder workingFolder, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StreamHelper.IsFileExistsAsync(Windows.Storage.StorageFolder,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsFileExistsAsync (workingFolder As StorageFolder, fileName As String) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="static member IsFileExistsAsync : Windows.Storage.StorageFolder * string -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StreamHelper.IsFileExistsAsync (workingFolder, fileName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ IsFileExistsAsync(Windows::Storage::StorageFolder ^ workingFolder, System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use StorageFileHelper.FileExistsAsync instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.Toolkit.Uwp.Helpers.StreamHelper/&lt;IsFileExistsAsync&gt;d__11))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workingFolder" Type="Windows.Storage.StorageFolder" RefType="this" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="workingFolder">Folder to use.</param>
        <param name="fileName">Relative name of the file to open. Can contains subfolders.</param>
        <summary>
            Test if a file exists in the application local folder.
            </summary>
        <returns>True if file exists.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKnownFolderFileExistsAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; IsKnownFolderFileExistsAsync (Windows.Storage.KnownFolderId knownFolderId, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; IsKnownFolderFileExistsAsync(valuetype Windows.Storage.KnownFolderId knownFolderId, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StreamHelper.IsKnownFolderFileExistsAsync(Windows.Storage.KnownFolderId,System.String)" />
      <MemberSignature Language="F#" Value="static member IsKnownFolderFileExistsAsync : Windows.Storage.KnownFolderId * string -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StreamHelper.IsKnownFolderFileExistsAsync (knownFolderId, fileName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ IsKnownFolderFileExistsAsync(Windows::Storage::KnownFolderId knownFolderId, System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use StorageFileHelper.FileExistsAsync instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="knownFolderId" Type="Windows.Storage.KnownFolderId" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="knownFolderId">The well known folder ID to use</param>
        <param name="fileName">Relative name of the file to open. Can contains subfolders.</param>
        <summary>
            Test if a file exists in the application local cache folder.
            </summary>
        <returns>True if file exists.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLocalCacheFileExistsAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; IsLocalCacheFileExistsAsync (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; IsLocalCacheFileExistsAsync(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StreamHelper.IsLocalCacheFileExistsAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsLocalCacheFileExistsAsync (fileName As String) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="static member IsLocalCacheFileExistsAsync : string -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StreamHelper.IsLocalCacheFileExistsAsync fileName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ IsLocalCacheFileExistsAsync(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use StorageFileHelper.FileExistsAsync instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Relative name of the file to open. Can contains subfolders.</param>
        <summary>
            Test if a file exists in the application local cache folder.
            </summary>
        <returns>True if file exists.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLocalFileExistsAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; IsLocalFileExistsAsync (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; IsLocalFileExistsAsync(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StreamHelper.IsLocalFileExistsAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsLocalFileExistsAsync (fileName As String) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="static member IsLocalFileExistsAsync : string -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StreamHelper.IsLocalFileExistsAsync fileName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ IsLocalFileExistsAsync(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use StorageFileHelper.FileExistsAsync instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Relative name of the file to open. Can contains subfolders.</param>
        <summary>
            Test if a file exists in the application local folder.
            </summary>
        <returns>True if file exists.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPackagedFileExistsAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; IsPackagedFileExistsAsync (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; IsPackagedFileExistsAsync(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StreamHelper.IsPackagedFileExistsAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsPackagedFileExistsAsync (fileName As String) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="static member IsPackagedFileExistsAsync : string -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StreamHelper.IsPackagedFileExistsAsync fileName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ IsPackagedFileExistsAsync(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use StorageFileHelper.FileExistsAsync instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Relative name of the file to open. Can contains subfolders.</param>
        <summary>
            Test if a file exists in the application installation folder.
            </summary>
        <returns>True if file exists.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadTextAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string&gt; ReadTextAsync (this Windows.Storage.Streams.IRandomAccessStream stream, System.Text.Encoding encoding = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string&gt; ReadTextAsync(class Windows.Storage.Streams.IRandomAccessStream stream, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Toolkit.Uwp.Helpers.StreamHelper.ReadTextAsync(Windows.Storage.Streams.IRandomAccessStream,System.Text.Encoding)" />
      <MemberSignature Language="F#" Value="static member ReadTextAsync : Windows.Storage.Streams.IRandomAccessStream * System.Text.Encoding -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="Microsoft.Toolkit.Uwp.Helpers.StreamHelper.ReadTextAsync (stream, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Toolkit.Uwp</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.Toolkit.Uwp.Helpers.StreamHelper/&lt;ReadTextAsync&gt;d__12))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="Windows.Storage.Streams.IRandomAccessStream" RefType="this" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="stream">Stream to read from.</param>
        <param name="encoding">Encoding to use. Can be set to null (ASCII will be used in this case).</param>
        <summary>
            Read stream content as a string.
            </summary>
        <returns>Stream content.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>